/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/teams": {
    /**
     * **Description:**
     *  This endpoint returns team information based on year,leagueId,sportId and gameType.
     *
     *  **Return Includes:** League,division,sport and venue information for each team.
     *
     *  **Required Parameters:** No parameters are required to run this call. However, sportIds and leagueIds must be called seperately
     *
     *  **Hydrations:** This endpoint can accept the hydrations query parameter.
     *
     *
     *
     *  ---
     *  **Example of call with hydration parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams?season=2018&sportId=1&hydrate=league
     */
    get: operations["teams"];
  };
  "/v1/teams/history": {
    /** allTeams */
    get: operations["allTeams"];
  };
  "/v1/teams/stats": {
    /**
     * **Description:**
     *  This endpoint returns team statistics based on year,leagueId,sportId and gameType.
     *
     *  **Return Includes:** team season statistics.
     *
     *  **Required Parameters:** stat group, season, and stats are required to run this call
     *
     *
     *
     *  ---
     *  **Example of call with required parameters**
     *
     *  http://statsapi.mlb.com/api/v1/teams/stats?group=hitting&stats=season&season=2018
     */
    get: operations["teams stats"];
  };
  "/v1/teams/stats/leaders": {
    /**
     * **Description:**
     *  This endpoint returns statistical data for top performers  based on League Leader Categories.
     *
     *  **Return Includes:** Player biographical and statistical information.
     *
     *  **Required Parameters:** leaderCategories is required to run this call.
     *
     *  **Hydrations:** This endpoint can accept the hydrations query parameter.
     *
     *
     *  ---
     *  **Example of call with required parameters**
     *
     * https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns
     *
     *  ---
     *  **Example of call with hydration parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns&hydrate=team
     */
    get: operations["teamstatsleaders"];
  };
  "/v1/teams/affiliates": {
    /**
     * **Description:**
     *  This endpoint returns a directory of affiliates for a given team based on teamIds,leagueId,sportId and gameType.
     *
     *  **Return Includes:** League,division,sport and venue information for each team.
     *
     *  **Required Parameters:** teamIds is required to run this call.
     *
     *  **Hydrations:** This endpoint can accept the hydrations query parameter.
     *
     *
     *
     *  ---
     *  **Example of call with required parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams/affiliates?teamIds=147
     *
     *  ---
     *  **Example of call with hydrated parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams/affiliates?teamIds=147&hydrate=league
     */
    get: operations["affiliates"];
  };
  "/v1/teams/{teamId}": {
    /**
     * **Description:**
     *  This endpoint returns a team directory based on teamId.
     *
     *  **Return Includes:** League,division,sport and venue information for each team.
     *
     *  **Required Parameters:** teamId is required to run this call.
     *
     *  **Hydrations:** This endpoint can accept the hydrations query parameter.
     *
     *
     *
     *  ---
     *  **Example of call with required parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams/147
     *
     *  ---
     *  **Example of call with hydrated parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams/147?hydrate=league
     */
    get: operations["teamId"];
  };
  "/v1/teams/{teamId}/stats": {
    /**
     * **Description:**
     *  This endpoint returns a team directory based on teamId.
     *
     *  **Return Includes:** Team season statistics.
     *
     *  **Required Parameters:** stat group, season, and stats are required to run this call.
     *
     *  **Hydrations:** This endpoint can accept the hydrations query parameter.
     *
     *
     *
     *  ---
     *  **Example of call with required parameters**
     *
     *  http://statsapi.mlb.com/api/v1/teams/137/stats?group=hitting&stats=season&season=2019
     *
     *  ---
     *  **Example of call with hydrated parameters**
     *
     *  http://statsapi.mlb.com/api/v1/teams/137/stats?group=hitting&stats=season&season=2019
     */
    get: operations["teamIdIndividualStats"];
  };
  "/v1/teams/{teamId}/affiliates": {
    /**
     * **Description:**
     *  This endpoint allows you to return directory of affiliates for a given team.
     *
     *  **Return Includes:** League,division,sport and venue information for each team.
     *
     *  **Required Parameters:** teamId is required to run this call.
     *
     *  **Hydrations:** This endpoint can accept the hydrations query parameter.
     *
     *
     *
     *  ---
     *  **Example of call with required parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams/147/affiliates
     *
     *  ---
     *  **Example of call with hydrated parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams/147/affiliates?hydrate=league
     */
    get: operations["TeamIdaffiliates"];
  };
  "/v1/teams/{teamId}/alumni": {
    /**
     * **Description:**
     *  This endpoint allows you to return directory of active alumni for a given team.
     *
     *  **Return Includes:** biographical information.
     *
     *  **Required Parameters:** teamId,season & statGroup are required to run this call.
     *
     *  **Hydrations:** This endpoint can accept the hydrations query parameter.
     *
     *
     *
     *  ---
     *  **Example of call with required parameters**
     *
     *  http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting
     *
     *  ---
     *  **Example of call with hydrated parameters**
     *
     *  http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=rosterEntries
     */
    get: operations["alumni"];
  };
  "/v1/teams/{teamId}/coaches": {
    /**
     * **Description:**
     *  This endpoint allows you return a directory of coaches for a particular team.
     *
     *  **Return Includes:** fullName, job,jobID and profile link.
     *
     *  **Required Parameters:** teamId is required to run this call.
     *
     *  ---
     *  **Example of call with required parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams/109/coaches
     */
    get: operations["TeamIdcoaches"];
  };
  "/v1/teams/{teamId}/personnel": {
    /**
     * **Description:**
     *  This endpoint allows you return a directory of personnel for a particular team.
     *
     *  **Return Includes:** fullName, job,jobID and profile link.
     *
     *  **Required Parameters:** teamId is required to run this call.
     *
     *  ---
     *  **Example of call with required parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams/109/personnel
     */
    get: operations["TeamIdpersonnel"];
  };
  "/v1/teams/{teamId}/leaders": {
    /**
     * **Description:**
     *  This endpoint returns statistical data for a team's top performers information based on League Leader Categories.
     *
     *  **Return Includes:** Player biographical and statistical information.
     *
     *  **Required Parameters:** teamdId,season, and leaderCategories is required to run this call.
     *
     *  **Hydrations:** This endpoint can accept the hydrations query parameter.
     *
     *
     *
     *  ---
     *  **Example of call with required parameters**
     *
     *   https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018
     *
     *  ---
     *  **Example of call with hydration parameters**
     *
     *   https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=team(league),hydrations
     */
    get: operations["teamleaders"];
  };
  "/v1/teams/{teamId}/roster": {
    /**
     * **Description:**
     *  Insert teamId to return a directory of players based on roster status for a particular club.
     *
     *
     *  **Return Includes:** Player information for provided team.
     *
     *  **Required Parameters:** teamId, season, & rosterType is required to run this call.
     *
     *  **Hydrations:** This endpoint can accept the hydrations query parameter.
     *
     *
     *
     *
     *
     *
     *  ---
     *  **Example of call with required parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams/109/roster?rosterType=active
     *
     *  ---
     *  **Example of call with hydrated parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams/109/roster?hydrate=person(stats(type=season,season=2018),education)&rosterType=active
     */
    get: operations["roster"];
  };
  "/v1/teams/{teamId}/roster/{rosterType}": {
    /**
     * **Description:**
     *  This endpoint returns team directorial information based on roster.
     *
     *  **Return Includes:** Player information for a provided team.
     *
     *  **Required Parameters:** teamId, season and, rosterType is required to run this call.
     *
     *  **Hydrations:** This endpoint can accept the hydrations query parameter.
     *
     *
     *
     *
     *
     *
     *  ---
     *  **Example of call with required parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams/109/roster/Active
     *
     *  ---
     *  **Example of call with hydrated parameters**
     *
     *  https://statsapi.mlb.com/api/v1/teams/109/roster/Active?season=2018&hydrate=person(stats(type=season,season=2018),education),hydrations
     */
    get: operations["rosterType"];
  };
}

export interface components {
  schemas: {
    AdditionalBioRestObject: {
      homeTown?: string;
    };
    AwardRestObject: {
      /**
       * Format: date
       * @description Format: YYYY-MM-DDTHH:MM:SSZ
       */
      date?: string;
      description?: string;
      history?: string;
      homePageUrl?: string;
      /** @description Unique Identifier */
      id?: string;
      imageUrl?: string;
      /** @description The league the division belongs to<br/>For a list of all leagueIds: https://statsapi.mlb.com/api/v1/leagues */
      league?: components["schemas"]["LeagueRestObject"];
      /** @description Unique Name */
      name?: string;
      notes?: string;
      /** @description All of the details of a player */
      player?: components["schemas"]["BaseballPersonRestObject"];
      recipientType?: string;
      results?: components["schemas"]["AwardResultRestObject"][];
      /** @description Season of play */
      season?: string;
      /** @description Shortened version of name. Format: AL East, SF Giants */
      shortName?: string;
      /**
       * Format: int32
       * @description The order of sorting, ascending or descending
       */
      sortOrder?: number;
      /** @description The sport the league belongs to<br/>For a list of all sportIds: https://statsapi.mlb.com/api/v1/sports */
      sport?: components["schemas"]["SportRestObject"];
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
      /** Format: int32 */
      votes?: number;
    };
    AwardResultRestObject: {
      /** Format: int32 */
      seasonId?: number;
      winners?: components["schemas"]["AwardWinnerRestObject"][];
    };
    AwardWinnerRestObject: {
      coach?: components["schemas"]["PersonRestObject"];
      /** @description All of the details of a player */
      player?: components["schemas"]["PersonRestObject"];
      rank?: string;
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
    };
    BaseballDraftProspectRestObject: {
      /**
       * Format: int32
       * @description A unique identifier for a player in the EBIS system
       */
      bisPlayerId?: number;
      /** Format: int32 */
      bisSchoolId?: number;
      blurb?: string;
      draftType?: components["schemas"]["DraftTypeEnumRestObject"];
      /** @description Links to images of person. */
      headshotLink?: string;
      home?: components["schemas"]["LocationRestObject"];
      /** @description Whether or not the players been drafted */
      isDrafted?: boolean;
      isPass?: boolean;
      /** @description All of the details of a player */
      person?: components["schemas"]["BaseballPersonRestObject"];
      /** Format: int32 */
      pickNumber?: number;
      /** @description Round in which a player was drafted */
      pickRound?: string;
      pickValue?: string;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      roundPickNumber?: number;
      school?: components["schemas"]["SchoolRestObject"];
      scoutingReport?: string;
      signingBonus?: string;
      /** @description All of the details of a team */
      team?: components["schemas"]["BaseballTeamRestObject"];
      /** @description Year the player was drafted. Format: 2000 */
      year?: string;
    };
    BaseballPersonRestObject: {
      alumniLastSeason?: string;
      articles?: components["schemas"]["IFeedRestObject"][];
      /** @description Bat side of hitter */
      batSide?: components["schemas"]["DynamicEnumRestObject"];
      drafts?: components["schemas"]["BaseballDraftProspectRestObject"][];
      firstLastName?: string;
      fullFMLName?: string;
      fullLFMName?: string;
      initLastName?: string;
      lastFirstName?: string;
      lastInitName?: string;
      mixedFeed?: components["schemas"]["IFeedRestObject"][];
      /** Format: date */
      mlbDebutDate?: string;
      nameSlug?: string;
      nameTitle?: string;
      note?: string;
      /** @description Handedness of pitcher */
      pitchHand?: components["schemas"]["DynamicEnumRestObject"];
      /** Format: double */
      strikeZoneBottom?: number;
      /** Format: double */
      strikeZoneTop?: number;
      transactions?: components["schemas"]["TransactionRestObject"][];
      videos?: components["schemas"]["IFeedRestObject"][];
    };
    BaseballTeamRestObject: {
      springLeague?: components["schemas"]["LeagueRestObject"];
    };
    BroadcastRestObject: {
      callSign?: string;
      homeAway?: string;
      /** Format: int32 */
      id?: number;
      isNational?: boolean;
      language?: string;
      /** @description The name of the broadcast. Format: KWKW 1330, 95.7 FM The Game, etc */
      name?: string;
      site?: string;
      /** Format: int32 */
      sourceUrl?: number;
      /** @description The type of broadcast. Format: AM, FM, TV, etc */
      type?: string;
      videoResolution?: components["schemas"]["VideoResolutionEnumRestObject"];
    };
    Conference: unknown;
    ConferenceRestObject: {
      /**
       * Format: int32
       * @description Unique Identifier
       */
      id?: number;
      /** @description Link to full resource */
      link?: string;
      /** @description Unique Name */
      name?: string;
    };
    CoordinateRestObject: {
      coordinates?: string[];
      label?: string;
      /** Format: double */
      latitude?: number;
      /** Format: double */
      longitude?: number;
    };
    DecisionRestObject: {
      /** @description All of the details of the player who lost */
      loser?: components["schemas"]["PersonRestObject"];
      /** @description All of the details of the player who won */
      winner?: components["schemas"]["PersonRestObject"];
    };
    Division: unknown;
    DivisionRestObject: {
      /** @description Shortened version of short name. Format: ALE, SFG */
      abbreviation?: string;
      /** @description All the details of a conference */
      conference?: components["schemas"]["ConferenceRestObject"];
      /** @description Whether or not there is a wildcard */
      hasWildcard?: boolean;
      /**
       * Format: int32
       * @description Unique Identifier
       */
      id?: number;
      /** @description The league the division belongs to<br/>For a list of all leagueIds: https://statsapi.mlb.com/api/v1/leagues */
      league?: components["schemas"]["LeagueRestObject"];
      /** @description Link to full resource */
      link?: string;
      /** @description Unique Name */
      name?: string;
      /** @description Shortened version of name. Format: AL East, SF Giants */
      nameShort?: string;
      /** @description The sport the league belongs to<br/>For a list of all sportIds: https://statsapi.mlb.com/api/v1/sports */
      sport?: components["schemas"]["SportRestObject"];
    };
    DraftTypeEnumRestObject: unknown;
    DynamicEnumRestObject: {
      code?: string;
      description?: string;
      /** Format: int32 */
      sortOrder?: number;
    };
    EducationRestObject: {
      /** @description The player's college(s) */
      colleges?: components["schemas"]["SchoolRestObject"][];
      /** @description The player's highschool(s) */
      highschools?: components["schemas"]["SchoolRestObject"][];
    };
    FieldInfoRestObject: {
      /**
       * Format: int32
       * @description Number of seats in the venue.
       */
      capacity?: number;
    };
    FranchiseRestObject: {
      /** Format: int32 */
      firstSeasonId?: number;
      /** Format: int32 */
      franchiseId?: number;
      /** Format: int32 */
      lastSeasonId?: number;
      /** @description Link to full resource */
      link?: string;
      /** @description Unique Team Location. Toronto, Bronx, etc */
      locationName?: string;
      /** Format: int32 */
      mostRecentTeamId?: number;
      /** @description All of the details of a roster */
      roster?: components["schemas"]["RosterRestObject"];
      /** @description Unique Team Name. Blue Jays, Yankees, etc */
      teamName?: string;
    };
    GameContentRestObject: {
      /** @description All of the details of the game editorial */
      editorial?: components["schemas"]["GameEditorialRestObject"];
      gameNotes?: components["schemas"]["GameNotesRestObject"];
      /** @description All of the details of the game highlights */
      highlights?: components["schemas"]["GameHighlightsRestObject"];
      /** @description Link to full resource */
      link?: string;
      /** @description All of the details of the game media */
      media?: components["schemas"]["GameMediaRestObject"];
      /** @description List of boolean values for Game Content */
      summary?: components["schemas"]["GameContentSummaryRestObject"];
    };
    GameContentSummaryRestObject: {
      hasHighlightsVideo?: boolean;
      hasPreviewArticle?: boolean;
      hasRecapArticle?: boolean;
      hasWrapArticle?: boolean;
    };
    GameEditorialRestObject: {
      /** @description Gives the articles about the game */
      articles?: components["schemas"]["JsonNode"];
      /** @description Gives the written preview of upcoming game */
      preview?: components["schemas"]["JsonNode"];
      /** @description Lists the probable starting pitchers for the game */
      probables?: components["schemas"]["JsonNode"];
      /** @description Gives the written recap of the game */
      recap?: components["schemas"]["JsonNode"];
      /** @description Gives the written wrap of the game */
      wrap?: components["schemas"]["JsonNode"];
    };
    GameHighlightsRestObject: {
      gameCenter?: components["schemas"]["JsonNode"];
      highlights?: components["schemas"]["JsonNode"];
      live?: components["schemas"]["JsonNode"];
      milestone?: components["schemas"]["JsonNode"];
      scoreboard?: components["schemas"]["JsonNode"];
      scoreboardPreview?: components["schemas"]["JsonNode"];
    };
    GameInfoRestObject: {
      /**
       * Format: int32
       * @description Number of fans at the stadium as recorded by the club.
       */
      attendance?: number;
      /**
       * Format: int32
       * @description Amount of timet he game was delayed (in seconds).
       */
      delayDurationMinutes?: number;
      /**
       * Format: date-time
       * @description Time that the first pitch was thrown.
       */
      firstPitch?: string;
      /**
       * Format: int32
       * @description Amount of time the game lasted (in seconds).
       */
      gameDurationMinutes?: number;
    };
    GameMediaRestObject: {
      /** @description Whether or not the game is enhanced */
      enhancedGame?: boolean;
      /** @description Lists the title and items for media content. Format: Title - Extended Highlights, Items - additional fields for all relevant items */
      epg?: components["schemas"]["JsonNode"];
      /** @description Lists the title and items for media content. Format: Title - Extended Highlights, Items - additional fields for all relevant items */
      epgAlternate?: components["schemas"]["JsonNode"];
      featuredMedia?: components["schemas"]["JsonNode"];
      /** @description Whether or not the game is free */
      freeGame?: boolean;
      milestones?: components["schemas"]["JsonNode"];
    };
    GameNotesRestObject: {
      notes?: components["schemas"]["JsonNode"];
    };
    GameStatusRestObject: {
      /** @description Format: Preview, Live or Final */
      abstractGameState?: string;
      /** @description Single digit/letter status. Format: I = In Progress, F = Final<br/>For a list of all gameStatus: https://statsapi.mlb.com/api/v1/gameStatus */
      codedGameState?: string;
      /** @description Description of game state. Format: Delayed: Rain */
      detailedState?: string;
      /** @description Whether or not the start time is TBD */
      startTimeTBD?: boolean;
      /** @description Expanded version of coded game state. Format: IR = In Progress and Rain Delay<br/>For a list of all gameStatus: https://statsapi.mlb.com/api/v1/gameStatus */
      statusCode?: string;
    };
    GroupedStatDataRestObject: unknown;
    IFeedRestObject: unknown;
    JsonNode: unknown;
    LeadersRestObject: {
      /** @description TBD */
      leaderCategory?: string;
      /** @description The league the division belongs to<br/>For a list of all leagueIds: https://statsapi.mlb.com/api/v1/leagues */
      league?: components["schemas"]["LeagueRestObject"];
      /** @description Season of play */
      season?: string;
      /** @description Category of statistic to return. <br/>For a list of all statGroups: https://statsapi.mlb.com/api/v1/statGroups */
      statGroup?: string;
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
    };
    League: unknown;
    LeagueLeaderContainerRestObject: {
      leagueLeaders?: components["schemas"]["LeadersRestObject"][];
    };
    LeagueRestObject: {
      /** @description Shortened version of short name. Format: ALE, SFG */
      abbreviation?: string;
      /** @description Whether or not the League has Conferences */
      conferencesInUse?: boolean;
      /** @description Whether or not the League has Divisions */
      divisionsInUse?: boolean;
      /** @description True if a league uses points for standings */
      hasPlayoffPoints?: boolean;
      /** @description Whether or not there is a split season */
      hasSplitSeason?: boolean;
      /** @description Whether or not there is a wildcard */
      hasWildCard?: boolean;
      /**
       * Format: int32
       * @description Unique Identifier
       */
      id?: number;
      /** @description Link to full resource */
      link?: string;
      /** @description Unique Name */
      name?: string;
      /** @description Shortened version of name. Format: AL East, SF Giants */
      nameShort?: string;
      /**
       * Format: int32
       * @description The number of regular season games
       */
      numGames?: number;
      /**
       * Format: int32
       * @description The number of teams
       */
      numTeams?: number;
      /**
       * Format: int32
       * @description The number of wildcard teams
       */
      numWildcardTeams?: number;
      /** @description Deprecated Field */
      orgCode?: string;
      /** @description Season of play */
      season?: string;
      /** @description Dates of specific points in a season */
      seasonDateInfo?: components["schemas"]["SeasonRestObject"];
      /** @description The status of the season. Format: offseason */
      seasonState?: string;
      /**
       * Format: int32
       * @description The order of sorting, ascending or descending
       */
      sortOrder?: number;
      /** @description Time zone the venue is located in */
      timeZone?: components["schemas"]["TimeZoneRestObject"];
    };
    LocationRestObject: {
      address1?: string;
      address2?: string;
      address3?: string;
      address4?: string;
      /** @description City where the venue is located. Format: Cleveland */
      city?: string;
      coordinates?: components["schemas"]["CoordinateRestObject"][];
      /** @description Filter players by their home country */
      country?: string;
      defaultCoordinates?: components["schemas"]["CoordinateRestObject"];
      postalCode?: string;
      /** @description State where the venue is located. Format: Ohio */
      state?: string;
      /** @description State abbrevation where the venue is located. Format: OH */
      stateAbbrev?: string;
    };
    OfficialRestObject: {
      official?: components["schemas"]["PersonRestObject"];
      officialType?: string;
    };
    OtherNamesRestObject: {
      firstInitialLastName?: string;
      lastFirstName?: string;
      lastNameFirstInitial?: string;
      phoneticName?: string;
      slug?: string;
    };
    PeopleRestObject: {
      people?: components["schemas"]["PersonRestObject"][];
    };
    Person: unknown;
    PersonRestObject: {
      /** @description Whether or not a player is active */
      active?: boolean;
      additionalBio?: components["schemas"]["AdditionalBioRestObject"];
      /** @description Whether or not a player is an alternate captain */
      alternateCaptain?: boolean;
      /** @description All of the details of a player's awards */
      awards?: components["schemas"]["AwardRestObject"][];
      /** @description City the player was born in. Format: La Romana */
      birthCity?: string;
      /** @description Country the player was born in. Format: Dominican Republic */
      birthCountry?: string;
      /**
       * Format: date
       * @description Birth date of a player. Format: 1983-01-07
       */
      birthDate?: string;
      /** @description State or Province the player was born in. Format: NY */
      birthStateProvince?: string;
      /** @description Name that shows up in the box score. Last name or last name and first initial */
      boxscoreName?: string;
      /** @description Whether or not a player is a captain */
      captain?: boolean;
      /**
       * Format: int32
       * @description Current age of a player. Format: 34
       */
      currentAge?: number;
      /** @description All of the details of a player's current team */
      currentTeam?: components["schemas"]["TeamRestObject"];
      /** @description City the player died in. Format: La Romana */
      deathCity?: string;
      /** @description Country the player died in. Format: Dominican Republic */
      deathCountry?: string;
      /**
       * Format: date
       * @description Death date of a player. Format: 1983-01-07
       */
      deathDate?: string;
      /** @description State or Province the player died in. Format: NY */
      deathStateProvince?: string;
      /** @description All of the details of the draft a player was drafted in */
      draft?: components["schemas"]["PlayerDraftInfoRestObject"][];
      /**
       * Format: int32
       * @description Year the player was drafted. Format: 2000
       */
      draftYear?: number;
      /** @description All of the details of a player's education */
      education?: components["schemas"]["EducationRestObject"];
      /** @description First name of a player */
      firstName?: string;
      /** @description Full name of a player. Format: Edwin Encarnacion */
      fullName?: string;
      /** @description Gender for a player. Format: M */
      gender?: string;
      /** @description Height of a player. Format: 6' 1 */
      height?: string;
      /**
       * Format: int32
       * @description Unique Player Identifier. Format: 434538, 429665, etc<br/>For a sample list of playerIds: https://statsapi.mlb.com/api/v1/sports/1/players?season=2019
       */
      id?: number;
      /** @description If current id searched for is a currently player */
      isPlayer?: boolean;
      /** @description Complete and confirmed all biographical data */
      isVerified?: boolean;
      jobEntries?: components["schemas"]["RosterEntryRestObject"][];
      /** @description Last name of a player */
      lastName?: string;
      /**
       * Format: date
       * @description Date of last game played. Format: 1983-01-07
       */
      lastPlayedDate?: string;
      /** @description Link to full resource */
      link?: string;
      /** @description Middle name of a player */
      middleName?: string;
      /** @description Matrilineal name for player. */
      nameMatrilineal?: string;
      nationality?: string;
      /** @description Nick nme for a player. Example: The Freak */
      nickName?: string;
      /** @description All of the details of a player's other names */
      otherNames?: components["schemas"]["OtherNamesRestObject"];
      /** @description Links to images of person. */
      photos?: components["schemas"]["PhotoRestObject"][];
      /** @description The jersey number a player wears */
      primaryNumber?: string;
      /** @description All of the details of a player's primary position */
      primaryPosition?: components["schemas"]["PositionRestObject"];
      /** @description Pronunciation guide for a player's name */
      pronunciation?: string;
      /** @description Whether or not a player is a rookie */
      rookie?: boolean;
      rosterEntries?: components["schemas"]["RosterEntryRestObject"][];
      /** @description All of the details of a player's social media */
      social?: components["schemas"]["SocialMediaRestObject"];
      /** @description All of the details of a player's stats */
      stats?: components["schemas"]["StatContainerRestObject"][];
      /** @description Name a player uses */
      useName?: string;
      /**
       * Format: int32
       * @description Weight of a player. Format: 230
       */
      weight?: number;
    };
    PhotoRestObject: {
      defaultRes?: string;
      doubleRes?: string;
      lowRes?: string;
      photoType?: string;
      tripleRes?: string;
    };
    Play: unknown;
    PlayRestObject: {
      /** @description Includes all details of a play */
      play?: components["schemas"]["Play"];
    };
    PlayerDraftInfoRestObject: {
      /** Format: int32 */
      pickInRound?: number;
      /** Format: int32 */
      pickOverall?: number;
      /** @description Round in which a player was drafted */
      round?: string;
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
      /**
       * Format: int32
       * @description Year the player was drafted. Format: 2000
       */
      year?: number;
    };
    PositionRestObject: {
      /** @description Position abbreviation. Format: SS, P, 1B, etc<br/>For a list of all positions: https://statsapi.mlb.com/api/v1/positions */
      abbreviation?: string;
      /** @description Position number. Format: 1, 2, 3, etc<br/>For a list of all positions: https://statsapi.mlb.com/api/v1/positions */
      code?: string;
      /** @description Position name. Format: First base, Shortstop, Pitcher, etc<br/>For a list of all positions: https://statsapi.mlb.com/api/v1/positions */
      name?: string;
      /** @description Position type. Format: Infielder, Pitcher, etc<br/>For a list of all positions: https://statsapi.mlb.com/api/v1/positions */
      type?: string;
    };
    PromotionRestObject: {
      /** @description Link to full resource */
      altPageUrl?: string;
      description?: string;
      displayIfPast?: boolean;
      distribution?: string;
      /** @description Link to full resource */
      imageUrl?: string;
      /** @description Unique Name */
      name?: string;
      /** Format: int32 */
      offerId?: number;
      offerType?: string;
      /** Format: int32 */
      order?: number;
      other?: string;
      presentedBy?: string;
      sortKey?: string;
      /**
       * Format: int32
       * @description Unique team identifier
       */
      teamId?: number;
      /** @description Link to full resource */
      thumbnailUrl?: string;
      /** @description Link to full resource */
      tlink?: string;
    };
    RosterEntryRestObject: {
      alternateCaptain?: boolean;
      captain?: boolean;
      /**
       * Format: date
       * @description End date for range of data (must be used with start date). Format: MM/DD/YYYY
       */
      endDate?: string;
      /** @description Whether or not a player is active */
      isActive?: boolean;
      isActiveFortyMan?: boolean;
      /** @description Jersey number that a player wears. Format: 16, 34, etc */
      jerseyNumber?: string;
      job?: string;
      jobId?: string;
      note?: string;
      /** Format: int32 */
      parentTeamId?: number;
      /** @description All of the details of a player */
      person?: components["schemas"]["PersonRestObject"];
      /** @description All of the details of a player's position */
      position?: components["schemas"]["PositionRestObject"];
      /**
       * Format: date
       * @description Start date for range of data (must be used with end date). Format: MM/DD/YYYY
       */
      startDate?: string;
      /** @description Type of statistics. Format: Individual, Team, Career, etc.<br/>For a list of all statTypes: https://statsapi.mlb.com/api/v1/statTypes */
      stats?: components["schemas"]["Stats"];
      status?: components["schemas"]["DynamicEnumRestObject"];
      /** Format: date */
      statusDate?: string;
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
      title?: string;
    };
    RosterRestObject: {
      /** @description Link to full resource */
      link?: string;
      /** @description All of the details of a roster */
      roster?: components["schemas"]["RosterEntryRestObject"][];
      /** @description Type of roster.<br/>For a list of all rosterTypes: https://statsapi.mlb.com/api/v1/rosterTypes */
      rosterType?: string;
      /**
       * Format: int32
       * @description Unique team identifier
       */
      teamId?: number;
    };
    ScheduleItemRestObject: {
      /** @description All of the promotional details */
      atBatPromotions?: components["schemas"]["PromotionRestObject"][];
      /** @description All of the ticket details */
      atBatTickets?: components["schemas"]["TicketRestObject"][];
      /** @description All of the broadcast details */
      broadcasts?: components["schemas"]["BroadcastRestObject"][];
      /** @description All of the details of game content */
      content?: components["schemas"]["GameContentRestObject"];
      /** @description All the details about the decisions of a game. Includes, Winner, Loser, and Save */
      decisions?: components["schemas"]["DecisionRestObject"];
      /**
       * Format: date-time
       * @description Format: YYYY-MM-DDTHH:MM:SSZ
       */
      endDateTime?: string;
      /**
       * Format: date-time
       * @description Date of Game. Format: YYYY-MM-DD
       */
      gameDate?: string;
      gameInfo?: components["schemas"]["GameInfoRestObject"];
      /** Format: int32 */
      gameNumber?: number;
      /**
       * Format: int32
       * @description Unique Primary Key Representing a Game
       */
      gamePk?: number;
      /** @description Type of Game. Available types in /api/v1/gameTypes */
      gameType?: string;
      isDefaultGame?: boolean;
      isFeaturedGame?: boolean;
      isTie?: boolean;
      /** @description Link to full resource */
      link?: string;
      /**
       * Format: date
       * @description Official Date of Game for Statistical Record. Format: YYYY-MM-DD
       */
      officialDate: string;
      officials?: components["schemas"]["OfficialRestObject"][];
      pregameOfficials?: components["schemas"]["OfficialRestObject"][];
      /** @description All of the promotional details */
      promotions?: components["schemas"]["PromotionRestObject"][];
      publicFacing?: boolean;
      /** @description All of the radio broadcast details */
      radioBroadcasts?: components["schemas"]["BroadcastRestObject"][];
      /** Format: date-time */
      rescheduleDate?: string;
      /** Format: date-time */
      rescheduledFrom?: string;
      /** Format: date-time */
      resumeDate?: string;
      /** Format: date-time */
      resumedFrom?: string;
      scoringPlays?: components["schemas"]["PlayRestObject"][];
      /** @description Season of play */
      season?: string;
      seriesStatus?: components["schemas"]["SeriesStatusRestObject"];
      seriesSummary?: components["schemas"]["TournamentSeriesSummaryRestObject"];
      /** Format: int32 */
      sortNumber?: number;
      /** @description All of the sponsorship details */
      sponsorships?: components["schemas"]["PromotionRestObject"][];
      /** @description Status and state of the game.<br/>For a list of all gameStatus: https://statsapi.mlb.com/api/v1/gameStatus */
      status?: components["schemas"]["GameStatusRestObject"];
      /** @description All of the ticket details */
      tickets?: components["schemas"]["TicketRestObject"][];
      /** @description All of the details of a venue<br/>For a list of all venueIds: https://statsapi.mlb.com/api/v1/venues */
      venue?: components["schemas"]["VenueRestObject"];
      weather?: components["schemas"]["WeatherRestObject"];
      xrefIds?: components["schemas"]["XrefIdRestObject"][];
    };
    ScheduleRestObject: unknown;
    SchoolRestObject: {
      /** @description City where the venue is located. Format: Cleveland */
      city?: string;
      /** @description Filter players by their home country */
      country?: string;
      /** @description Unique Name */
      name?: string;
      schoolClass?: string;
      /** @description State where the venue is located. Format: Ohio */
      state?: string;
    };
    SeasonRestObject: {
      /**
       * Format: date
       * @description Date of the all-star game. Format: YYYY-MM-DD
       */
      allStarDate?: string;
      /**
       * Format: date
       * @description Date of the first day of the second half of the regular season. Format: YYYY-MM-DD
       */
      firstDate2ndHalf?: string;
      /**
       * Format: date
       * @description Date of the last day of the first half of the regular season. Format: YYYY-MM-DD
       */
      lastDate1stHalf?: string;
      /**
       * Format: date
       * @description Date the postseason ends. Format: YYYY-MM-DD
       */
      postSeasonEndDate?: string;
      /**
       * Format: date
       * @description Date the postseason starts. Format: YYYY-MM-DD
       */
      postSeasonStartDate?: string;
      /**
       * Format: date
       * @description Date the preseason ends. Format: YYYY-MM-DD
       */
      preSeasonEndDate?: string;
      /**
       * Format: date
       * @description Date the preseason starts. Format: YYYY-MM-DD
       */
      preSeasonStartDate?: string;
      /**
       * Format: date
       * @description Date the regular season ends. Format: YYYY-MM-DD
       */
      regularSeasonEndDate?: string;
      /**
       * Format: date
       * @description Date the regular season starts. Format: YYYY-MM-DD
       */
      regularSeasonStartDate?: string;
      /** @description Season of play */
      seasonId?: string;
    };
    SeriesStatusRestObject: {
      description?: string;
      /** Format: int32 */
      gameNumber?: number;
      isOver?: boolean;
      isTied?: boolean;
      losingTeam?: components["schemas"]["TeamRestObject"];
      /**
       * Format: int32
       * @description The number of losses a team has. Format: 0, 12, 90, etc
       */
      losses?: number;
      result?: string;
      shortDescription?: string;
      /** @description Shortened version of name. Format: AL East, SF Giants */
      shortName?: string;
      /** Format: int32 */
      ties?: number;
      /** Format: int32 */
      totalGames?: number;
      winningTeam?: components["schemas"]["TeamRestObject"];
      /**
       * Format: int32
       * @description The number of wins a team has. Format: 0, 12, 90, etc
       */
      wins?: number;
    };
    SocialMediaRestObject: {
      /** @description The player's username and ID. Format: Username - georgekontos70, ID - 242731055756840 */
      facebook?: string[];
      googleplus?: string[];
      hashtags?: string[];
      /** @description The player's username. Format: joepanik, hunterpence, etc */
      instagram?: string[];
      periscope?: string[];
      pinterest?: string[];
      snapchat?: string[];
      tumblr?: string[];
      /** @description The player's handle. Format: @Bbelt9, @bcraw35, etc */
      twitter?: string[];
      vine?: string[];
      website?: string[];
      youtube?: string[];
    };
    Sport: unknown;
    SportRestObject: {
      /** @description Shortened version of short name. Format: ALE, SFG */
      abbreviation?: string;
      /** @description Flag for fetching sports that are currently active (Y), inactive (N), pending (P), or all teams (B) */
      active?: boolean;
      code?: string;
      deviceProperties?: components["schemas"]["JsonNode"];
      /**
       * Format: int32
       * @description Top level organization of a sport<br/>For a list of all sportIds: https://statsapi.mlb.com/api/v1/sports
       */
      id?: number;
      /** @description Link to full resource */
      link?: string;
      /** @description Name of a sport's league. Format: Major League Baseball */
      name?: string;
      /**
       * Format: int32
       * @description Determines the sort order of each sport. (ex. MLB -> AAA -> AA -> Rookie)
       */
      sortOrder?: number;
    };
    StatContainerRestObject: {
      exemptions?: components["schemas"]["StatExemptionRestObject"][];
      /** @description All of the details of a player */
      player?: components["schemas"]["Person"];
      /** @description Season of play */
      season?: string;
      /** @description All of the details of stat splits */
      splits?: components["schemas"]["StatSplitsRestObject"][];
      splitsTiedWithLimit?: components["schemas"]["StatSplitsRestObject"][];
      splitsTiedWithOffset?: components["schemas"]["StatSplitsRestObject"][];
      /** @description The sport the league belongs to<br/>For a list of all sportIds: https://statsapi.mlb.com/api/v1/sports */
      sport?: components["schemas"]["Sport"];
      stats?: components["schemas"]["StatDataRestObject"];
      /** @description All of the details of a team */
      team?: components["schemas"]["Team"];
      /** Format: int32 */
      totalSplits?: number;
    };
    StatDataRestObject: unknown;
    StatExemptionRestObject: {
      exemptionId?: string;
      exemptionName?: string;
      /** @description All of the details of a player */
      player?: components["schemas"]["PersonRestObject"];
    };
    StatSplitsRestObject: {
      awayTeam?: components["schemas"]["TeamRestObject"];
      /**
       * Format: date
       * @description Date of Game. Format: YYYY-MM-DD
       */
      date?: string;
      /** Format: int32 */
      dayOfWeek?: number;
      exemption?: components["schemas"]["StatExemptionRestObject"];
      /** @description Type of Game. Available types in /api/v1/gameTypes */
      gameType?: string;
      group?: string;
      homeTeam?: components["schemas"]["TeamRestObject"];
      isHome?: boolean;
      isWin?: boolean;
      /** @description The league the division belongs to<br/>For a list of all leagueIds: https://statsapi.mlb.com/api/v1/leagues */
      league?: components["schemas"]["LeagueRestObject"];
      /** Format: int32 */
      month?: number;
      /** Format: int32 */
      numOccurrences?: number;
      /**
       * Format: int32
       * @description The number of teams
       */
      numTeams?: number;
      /** @description All of the details of an opponent */
      opponent?: components["schemas"]["TeamRestObject"];
      opponentConference?: components["schemas"]["ConferenceRestObject"];
      opponentDivision?: components["schemas"]["DivisionRestObject"];
      /** @description All of the details of a player */
      player?: components["schemas"]["PersonRestObject"];
      /** Format: int32 */
      rank?: number;
      /** @description All of the details of a schedule */
      scheduleItemRestObject?: components["schemas"]["ScheduleItemRestObject"];
      /** @description Season of play */
      season?: string;
      split?: components["schemas"]["DynamicEnumRestObject"];
      /** @description The sport the league belongs to<br/>For a list of all sportIds: https://statsapi.mlb.com/api/v1/sports */
      sport?: components["schemas"]["SportRestObject"];
      /** @description Type of statistics. Format: Individual, Team, Career, etc.<br/>For a list of all statTypes: https://statsapi.mlb.com/api/v1/statTypes */
      stat?: components["schemas"]["StatDataRestObject"];
      /** @description Type of statistics. Format: Individual, Team, Career, etc.<br/>For a list of all statTypes: https://statsapi.mlb.com/api/v1/statTypes grouped */
      stats: components["schemas"]["GroupedStatDataRestObject"];
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
      type?: string;
      /** @description All of the details of a venue<br/>For a list of all venueIds: https://statsapi.mlb.com/api/v1/venues */
      venue?: components["schemas"]["VenueRestObject"];
    };
    Stats: unknown;
    StatsRestObject: {
      stats?: components["schemas"]["StatContainerRestObject"][];
    };
    StreakRestObject: {
      streakCode?: string;
      /** Format: int32 */
      streakNumber?: number;
      streakType?: string;
    };
    Team: unknown;
    TeamContentCms: unknown;
    TeamLeaderContainerRestObject: {
      /** @description All of the details of team leaders */
      teamLeaders?: components["schemas"]["LeadersRestObject"][];
    };
    TeamPlayoffs: unknown;
    TeamRestObject: {
      /** @description Shortened version of short name. Format: ALE, SFG */
      abbreviation?: string;
      /** @description All the details of a conference */
      conference?: components["schemas"]["ConferenceRestObject"];
      content?: components["schemas"]["TeamContentCms"];
      deviceProperties?: components["schemas"]["JsonNode"];
      /** @description All of the details of a division */
      division?: components["schemas"]["DivisionRestObject"];
      /** @description Unique File Code. Format: tor, nyy, etc */
      fileCode?: string;
      /** @description The first year of play. Format: 1903 */
      firstYearOfPlay?: string;
      /** @description All of the details of a franchise */
      franchise?: components["schemas"]["FranchiseRestObject"];
      homeAway?: string;
      /**
       * Format: int32
       * @description Unique team identifier
       */
      id?: number;
      isActive?: boolean;
      isPlaceholder?: boolean;
      /** @description The league the division belongs to<br/>For a list of all leagueIds: https://statsapi.mlb.com/api/v1/leagues */
      league?: components["schemas"]["LeagueRestObject"];
      /** @description Link to full resource */
      link?: string;
      /** @description Unique Team Location. Toronto, Bronx, etc */
      locationName?: string;
      /** @description Unique Full Team Name. Format: Toronto Blue Jays, New York Yankees, etc */
      name?: string;
      nextGameSchedule?: components["schemas"]["ScheduleRestObject"];
      nextSchedule?: components["schemas"]["ScheduleRestObject"];
      /** Format: int32 */
      parentOrgId?: number;
      parentOrgName?: string;
      playoffInfo?: components["schemas"]["TeamPlayoffs"];
      previousGameSchedule?: components["schemas"]["ScheduleRestObject"];
      previousSchedule?: components["schemas"]["ScheduleRestObject"];
      /** @description All of the details of a team's record */
      record?: components["schemas"]["TeamStandingsRecordRestObject"];
      /** @description All of the details of a roster */
      roster?: components["schemas"]["RosterRestObject"];
      /**
       * Format: int32
       * @description Season of play
       */
      season?: number;
      /** @description Shortened version of name. Format: AL East, SF Giants */
      shortName?: string;
      /** @description All of the details of a player's social media */
      social?: components["schemas"]["SocialMediaRestObject"];
      /** @description The sport the league belongs to<br/>For a list of all sportIds: https://statsapi.mlb.com/api/v1/sports */
      sport?: components["schemas"]["SportRestObject"];
      /** @description All of the details of a venue<br/>For a list of all venueIds: https://statsapi.mlb.com/api/v1/venues */
      springVenue?: components["schemas"]["VenueRestObject"];
      /** @description Unique Team Code. Format: tor, nya, etc */
      teamCode?: string;
      teamDesignation?: string;
      /** @description All of the details of team leaders */
      teamLeaders?: components["schemas"]["LeadersRestObject"][];
      /** @description Unique Team Name. Blue Jays, Yankees, etc */
      teamName?: string;
      /** @description All of the details of a player's stats */
      teamStats?: components["schemas"]["StatContainerRestObject"][];
      /** @description Three letter abbreviation that will be adjusted for different languages */
      triCode?: string;
      /** @description All of the details of a venue<br/>For a list of all venueIds: https://statsapi.mlb.com/api/v1/venues */
      venue?: components["schemas"]["VenueRestObject"];
    };
    TeamStandingsRecordRestObject: {
      clinchIndicator?: string;
      /** @description All the details of a conference */
      conference?: components["schemas"]["Conference"];
      conferenceGamesBack?: string;
      conferenceRank?: string;
      /** @description All of the details of a division */
      division?: components["schemas"]["Division"];
      divisionGamesBack?: string;
      divisionRank?: string;
      gamesBack?: string;
      /** Format: int32 */
      gamesPlayed?: number;
      /** @description The league the division belongs to<br/>For a list of all leagueIds: https://statsapi.mlb.com/api/v1/leagues */
      league?: components["schemas"]["League"];
      leagueGamesBack?: string;
      leagueRank?: string;
      leagueRecord?: components["schemas"]["WinLossRecordRestObject"];
      /** @description Season of play */
      season?: string;
      sportGamesBack?: string;
      sportRank?: string;
      springLeagueGamesBack?: string;
      springLeagueRank?: string;
      streak?: components["schemas"]["StreakRestObject"];
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
      wildCardGamesBack?: string;
      wildCardRank?: string;
    };
    TeamsRestObject: {
      /** @description Map of team objects */
      teams?: components["schemas"]["TeamRestObject"][];
    };
    TicketRestObject: {
      /** @description Link to full resource */
      ticketLink?: string;
      ticketType?: string;
    };
    TimeZoneRestObject: {
      /** @description Format: America/Detroit */
      id?: string;
      /**
       * Format: int32
       * @description The offset in hours from UTC. Format: -5
       */
      offset?: number;
      /** @description Time zone the venue is located in */
      tz?: string;
    };
    TournamentSeriesSummaryRestObject: unknown;
    TransactionRestObject: {
      /**
       * Format: date-time
       * @description Format: YYYY-MM-DDTHH:MM:SSZ
       */
      date?: string;
      description?: string;
      /** Format: date-time */
      effectiveDate?: string;
      fromTeam?: components["schemas"]["TeamRestObject"];
      /**
       * Format: int32
       * @description Unique Identifier
       */
      id?: number;
      isConditional?: boolean;
      /** @description All of the details of a player */
      person?: components["schemas"]["PersonRestObject"];
      /** Format: date-time */
      resolutionDate?: string;
      toTeam?: components["schemas"]["TeamRestObject"];
      type?: string;
    };
    VenueRestObject: {
      /** @description Dimensions and capacity of the venue */
      fieldInfo?: components["schemas"]["FieldInfoRestObject"];
      /**
       * Format: int32
       * @description Unique Identifier
       */
      id?: number;
      /** @description Link to full resource */
      link?: string;
      /** @description Location details about the venue */
      location?: components["schemas"]["LocationRestObject"];
      /** @description Unique Name */
      name?: string;
      /** @description Time zone the venue is located in */
      timeZone?: components["schemas"]["TimeZoneRestObject"];
    };
    VideoResolutionEnumRestObject: unknown;
    WeatherRestObject: {
      condition?: string;
      temp?: string;
      wind?: string;
    };
    WinLossRecordRestObject: {
      /** Format: int32 */
      losses?: number;
      pct?: string;
      /** Format: int32 */
      ties?: number;
      type?: string;
      /** Format: int32 */
      wins?: number;
    };
    XrefIdRestObject: unknown;
  };
}

export interface operations {
  /**
   * **Description:**
   *  This endpoint returns team information based on year,leagueId,sportId and gameType.
   *
   *  **Return Includes:** League,division,sport and venue information for each team.
   *
   *  **Required Parameters:** No parameters are required to run this call. However, sportIds and leagueIds must be called seperately
   *
   *  **Hydrations:** This endpoint can accept the hydrations query parameter.
   *
   *
   *
   *  ---
   *  **Example of call with hydration parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams?season=2018&sportId=1&hydrate=league
   */
  teams: {
    parameters: {
      query: {
        /**
         * Insert year to return team information for a particular season. Default excludes Allstar teams.
         *  1. Insert year: https://statsapi.mlb.com/api/v1/teams?season=1990
         */
        season?: string;
        /**
         * Insert activeStatus to populate teams based on active/inactive status for a given season.
         *
         * There are three status types:
         *   1. active - https://statsapi.mlb.com/api/v1/teams?season=2016&sportIds=13&activeStatus=Y
         *   2. inactive -  https://statsapi.mlb.com/api/v1/teams?season=2016&sportIds=13&activeStatus=N
         *   3. both - https://statsapi.mlb.com/api/v1/teams?season=2016&sportIds=13&activeStatus=B
         */
        activeStatus?: string;
        /**
         * Insert allStarStatuses to populate teams based on Allstar status for a given season.
         *
         * There are six status types:
         *   1. Normal Regular Season Teams (N) - https://statsapi.mlb.com/api/v1/teams?season=2016&sportIds=13&allStarStatuses=N
         *   2. Allstar Teams (Y) - https://statsapi.mlb.com/api/v1/teams?season=2016&sportIds=13&allStarStatuses=Y
         *   3. Futures Teams(F) - https://statsapi.mlb.com/api/v1/teams?season=2016&sportIds=13&allStarStatuses=F
         *   4. To Be Determined Teams/Postseason Teams (T) - https://statsapi.mlb.com/api/v1/teams?season=2016&sportIds=13&allStarStatuses=T
         *   5. International Teams (I) - https://statsapi.mlb.com/api/v1/teams?season=2016&sportIds=13&allStarStatuses=I
         *   6. Official/Non Teams (O) - https://statsapi.mlb.com/api/v1/teams?season=2016&sportIds=13&allStarStatuses=O
         */
        allStarStatuses?: string;
        /**
         * Insert leagueId to return team  information for particular league.
         *  1. One leagueId:  https://statsapi.mlb.com/api/v1/teams?leagueIds=103
         *
         * For  a list of all leagueIds:  http://statsapi.mlb.com/api/v1/league
         */
        leagueIds?: string;
        /**
         * Insert sportId to return team information for a particular sportId.
         *  1. Insert sportId: https://statsapi.mlb.com/api/v1/teams?sportIds=1&season=1990
         *  2. Insert multiple sportIds: https://statsapi.mlb.com/api/v1/teams?sportIds=1,11,12&season=1990
         *
         *  For a list of all sportId: http://statsapi.mlb.com/api/v1/sports
         */
        sportIds?: string;
        /**
         * Insert gameType to return team information for a particular gameType.
         *  1. Insert gameType: https://statsapi.mlb.com/api/v1/teams?gameTypes=R&season=1990&sportIds=1
         *
         *  For a list of all gameTypes: https://statsapi.mlb.com/api/v1/gameTypes
         */
        gameType?: string;
        /**
         * Insert Hydration(s) to return data for any available team hydration. Format "league,venue"
         *  1. One Hydration: https://statsapi.mlb.com/api/v1/teams?season=2018&sportIds=1&hydrate=league
         *  2. Multiple Hydrations: https://statsapi.mlb.com/api/v1/teams?season=2018&sportIds=1&hydrate=league,venue
         *  3. Check For Available Hydrations: https://statsapi.mlb.com/api/v1/teams?season=2018&sportIds=1&hydrate=hydrations
         *
         *    - Available Hydrations:
         *
         *      1. previousSchedule(inclusive=true)
         *      2. nextSchedule
         *      3. venue
         *      4. social
         *      5. deviceProperties
         *      6. game(promotions)
         *      7. game(atBatPromotions)
         *      8. game(tickets)
         *      9. game(atBatTickets)
         *      10. game(sponsorships)
         *      11. league
         *      12. person
         *      13. sport
         *      14. division
         */
        hydrate?: string[];
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/teams?gameTypes=R&season=2018&sportIds=1&fields=teams,id,name
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": unknown;
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** allTeams */
  allTeams: {
    parameters: {
      query: {
        /**
         * Insert teamId to return a historical data for a particular club(s).
         *  1. Insert teamId: https://statsapi.mlb.com/api/v1/teams/history?teamIds=147
         *  2. Insert multiple teamIds: https://statsapi.mlb.com/api/v1/teams/history?teamIds=147,110
         *
         *  For a list of all teamIds:  https://statsapi.mlb.com/api/v1/teams
         */
        teamIds: string;
        /**
         * Insert startSeason to return a historical data for a particular club(s) from the given year to present.
         *  1. Insert startSeason: https://statsapi.mlb.com/api/v1/teams/history?teamIds=147&startSeason=1903
         *  2. Insert startSeason & endSeason: https://statsapi.mlb.com/api/v1/teams/history?teamIds=147&startSeason=1995&endSeaon=2009
         *
         *  For a list of all teamIds:  https://statsapi.mlb.com/api/v1/teams
         */
        startSeason?: string;
        /**
         * Insert endSeason to return a historical data for a particular club(s) from the creation to the given year.
         *  1. Insert teamId: https://statsapi.mlb.com/api/v1/teams/history?teamIds=147
         *  2. Insert startSeason & endSeason: https://statsapi.mlb.com/api/v1/teams/history?teamIds=120&startSeason=2000&endSeason=2005
         *
         *  For a list of all teamIds:  https://statsapi.mlb.com/api/v1/teams
         */
        endSeason?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/teams/history?teamIds=120&startSeason=2000&endSeason=2005&fields=teams,id,name,venue,name
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": unknown;
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   *  This endpoint returns team statistics based on year,leagueId,sportId and gameType.
   *
   *  **Return Includes:** team season statistics.
   *
   *  **Required Parameters:** stat group, season, and stats are required to run this call
   *
   *
   *
   *  ---
   *  **Example of call with required parameters**
   *
   *  http://statsapi.mlb.com/api/v1/teams/stats?group=hitting&stats=season&season=2018
   */
  "teams stats": {
    parameters: {
      query: {
        /**
         * Insert year to return team stats for a particular season.
         *  1. Insert year: http://statsapi.mlb.com/api/v1/teams/stats?group=hitting&stats=season&season=2018
         */
        season: string;
        /**
         * Insert sportId to return team stats for a particular sportId.
         *  1. Insert sportId: http://statsapi.mlb.com/api/v1/teams/stats?group=hitting&stats=season&season=2018&sportIds=1
         *  2. Insert sportIds: http://statsapi.mlb.com/api/v1/teams/stats?group=hitting&stats=season&season=2018&sportIds=1,11
         *
         *  For a list of all sportId: http://statsapi.mlb.com/api/v1/sports
         */
        sportIds?: string;
        /**
         * Insert statGroup with the group parameter to return team stats for a particular statGroup.
         *  1. Insert statGroup: http://statsapi.mlb.com/api/v1/teams/stats?group=hitting&stats=season&season=2018&sportIds=1
         *
         *  For a list of all statGroups: https://statsapi.mlb.com/api/v1/statGroups
         */
        statGroup: string;
        /**
         * Insert gameType to return team stats for a particular gameType.
         *  1. Insert gameType: http://statsapi.mlb.com/api/v1/teams/stats?group=hitting&stats=season&season=2018&sportIds=1&gameType=W
         *
         *  For a list of all gameTypes: https://statsapi.mlb.com/api/v1/gameTypes
         */
        gameType?: string;
        /**
         * Insert stats to return team stats for a particular statType and statGroup.
         *  1. Insert one statType one statGroup: http://statsapi.mlb.com/api/v1/teams/stats?group=hitting&stats=season&season=2018&sportIds=1&gameType=R
         *  2. Insert multiple statTypes and statGroups: http://statsapi.mlb.com/api/v1/teams/stats?group=pitching,hitting&stats=season,seasonAdvanced&season=2018&sportIds=1&gameType=R
         *
         *  **For a list of all statTypes: https://statsapi.mlb.com/api/v1/statTypes**
         *
         *  **For a list of all statGroups: https://statsapi.mlb.com/api/v1/statGroups**
         *
         *    - Notes on statSplits statType
         *
         *      Best practice for MLB sitCodes, use stats=statSplits&sitCodes="sitCode".
         *
         *      1. Team batting statistics batting right: http://statsapi.mlb.com/api/v1/teams/stats?group=hitting&season=2018&sportIds=1&stats=statSplits&sitCodes=r
         *
         *      **For a list of all sitCodes: https://statsapi.mlb.com/api/v1/situationCodes**
         *
         *      Best practice for MLB byDateRange, use stats=byDateRange&startDate="mm/dd/yyyy"&endDate="mm/dd/yyyy".
         *
         *      1. Team batting statistics from May 17th-May21st: http://statsapi.mlb.com/api/v1/teams/stats?group=hitting&season=2018&sportIds=1&stats=byDateRange&startDate=05/17/2018&endDate=05/21/2018
         */
        stats?: string;
        /**
         * Insert order to return team stats in a particular order.
         *  1. Insert order: http://statsapi.mlb.com/api/v1/teams/stats?group=hitting&season=2018&stats=season&sportIds=1&gameType=R&order=desc
         */
        order?: string;
        /**
         * Insert a limit to limit return.
         * 1. Insert limit:  http://statsapi.mlb.com/api/v1/teams/stats?sportId=1&gameType=R&group=hitting&stats=season&season=2018&limit=5&offset=0
         */
        limit?: number;
        /**
         * Insert an offset to returns i+1 as the first record in the set of teams.
         * 1. Insert offset: http://statsapi.mlb.com/api/v1/teams/stats?sportId=1&gameType=R&group=hitting&stats=season&season=2018&limit=5&offset=0
         */
        offset?: string;
        /**
         * Insert sortStat to sort team stats based on a specific stat.
         *  1. Insert sortStat: http://statsapi.mlb.com/api/v1/teams/stats?group=hitting&season=2018&stats=season&sportIds=1&gameType=R&order=desc&sortStat=homeRuns
         *
         *  For a list of all available stats: https://statsapi.mlb.com/api/v1/baseballStats
         */
        sortStat?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/teams?gameTypes=R&season=2018&sportIds=1&fields=teams,id,name
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": unknown;
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   *  This endpoint returns statistical data for top performers  based on League Leader Categories.
   *
   *  **Return Includes:** Player biographical and statistical information.
   *
   *  **Required Parameters:** leaderCategories is required to run this call.
   *
   *  **Hydrations:** This endpoint can accept the hydrations query parameter.
   *
   *
   *  ---
   *  **Example of call with required parameters**
   *
   * https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns
   *
   *  ---
   *  **Example of call with hydration parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns&hydrate=team
   */
  teamstatsleaders: {
    parameters: {
      query: {
        /**
         * Insert a league leader category to return information  and ranking for a particular statistic.
         *   1. Insert leaderCategory:  https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns
         *
         *   For  a list of all leaderCategories:  https://statsapi.mlb.com/api/v1/leagueLeaderTypes
         */
        leaderCategories: string[];
        /**
         * Insert a sitCode to return information  and ranking for a particular statistic in a particular game type.
         *   1. Insert sitCode:  http://statsapi.mlb.com/api/v1/teams/stats/leaders?sportId=1&group=hitting&sitCodes=p2&statType=statSplits&leaderCategories=homeRuns
         *
         *   For a list of all sitCodes: https://statsapi.mlb.com/api/v1/situationCodes
         */
        sitCodes?: string[];
        /**
         * Insert a gameType to return information  and ranking for a particular statistic in a particular gameType.
         *  1. Insert gameType:  http://statsapi.mlb.com/api/v1/teams/stats/leaders?gameTypes=D&leaderCategories=homeRuns&season=2018&sportId=1&statGroup=hitting
         *
         *  For a list of all gameTypes: https://statsapi.mlb.com/api/v1/gameTypes
         */
        gameTypes?: string[];
        /**
         * Insert a stat group to return information  and ranking for a particular statistic in a particular group.
         *  1. Insert statGroup:  https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns&gameTypes=R&statGroups=hitting&season=2018
         *
         *  For a list of all statGroups: https://statsapi.mlb.com/api/v1/statGroups
         */
        statGroup?: string[];
        /**
         * Insert year to return information  and ranking for a particular statistic in a given year.
         *  1. Insert year: https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns&gameTypes=R&statGroups=hitting&season=2018
         */
        season?: string;
        /**
         * Insert leagueIds to return statistics for a given team.
         *  1. Insert leagueIds: https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns&sportId=1&leagueIds=104&season=2018
         */
        leagueIds?: number;
        /**
         * Insert date to return a directory of attendance metrics for a particular date range. Format:
         *  MM/DD/YYYY
         *
         * **startDate must be coupled with endDate and byDateRange statType**
         *
         *  1. Insert date range: https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns&startDate=06/01/2018&endDate=06/15/2018&season=2018&statType=byDateRange
         */
        startDate?: string;
        /**
         * Insert date to return a directory of attendance metrics for a particular date range. Format:
         *  MM/DD/YYYY
         *
         * **endDate must be coupled with startDate and byDateRange statType**
         *
         *  1. Insert date range: https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns&startDate=06/01/2018&endDate=06/15/2018&season=2018&statType=byDateRange
         */
        endDate?: string;
        /**
         * Insert a sportId to return information  and ranking for a particular statistic in a given sport.
         *   1. Insert sportId:  https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns&sportId=12&season=2018
         *
         *   For  a list of all sportIds:  http://statsapi.mlb.com/api/v1/sports
         */
        sportId?: string;
        /**
         * Insert Hydration(s) to return data for any available team hydration. The hydrations for Teams stats leaders  and "team" which have subhydrations Format "team(subHydration1, subHydrations2)"
         *
         *  1. One Hydration: https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns&hydrate=team(league)
         *  2. Multiple Hydrations: https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns&hydrate=team(league,nextSchedule)
         *  3. Check For Available Hydrations: https://statsapi.mlb.com/api/v1/teams?season=2018&sportIds=1&hydrate=hydrations
         *
         *    - Available Hydrations:
         *
         *      1. previousSchedule(inclusive=true)
         *      2. nextSchedule
         *      3. venue
         *      4. social
         *      5. deviceProperties
         *      6. game(promotions)
         *      7. game(atBatPromotions)
         *      8. game(tickets)
         *      9. game(atBatTickets)
         *      10. game(sponsorships)
         *      11. league
         *      12. person
         *      13. sport
         *      14. division
         */
        hydrate?: string[];
        /**
         * Insert a limit to limit return.
         * 1. Insert limit: https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns&limit=1
         */
        limit?: number;
        /**
         * Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/teams/stats/leaders?leaderCategories=homeRuns&fields=leagueLeaders,leaders,rank,value,team,name
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["LeagueLeaderContainerRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   *  This endpoint returns a directory of affiliates for a given team based on teamIds,leagueId,sportId and gameType.
   *
   *  **Return Includes:** League,division,sport and venue information for each team.
   *
   *  **Required Parameters:** teamIds is required to run this call.
   *
   *  **Hydrations:** This endpoint can accept the hydrations query parameter.
   *
   *
   *
   *  ---
   *  **Example of call with required parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams/affiliates?teamIds=147
   *
   *  ---
   *  **Example of call with hydrated parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams/affiliates?teamIds=147&hydrate=league
   */
  affiliates: {
    parameters: {
      query: {
        /**
         * Insert teamId to return a directory of affiliates for a particular club.
         *  1. Insert teamId: https://statsapi.mlb.com/api/v1/teams/affiliates?teamIds=147
         *
         *  For a list of all teamIds:  https://statsapi.mlb.com/api/v1/teams
         */
        teamIds: string;
        /**
         * Insert a sportId to return a directory of affiliates for a particular club in a particular sport.
         *   1. Insert sportId:  https://statsapi.mlb.com/api/v1/teams/affiliates?sportId=1&teamIds=147
         *
         *   For  a list of all sportIds:  http://statsapi.mlb.com/api/v1/sports
         */
        sportId?: number;
        /**
         * Insert year to return a directory of affiliates for a particular club in a particular season.
         *  1. Insert year: https://statsapi.mlb.com/api/v1/teams/affiliates?season=2017&teamIds=147
         */
        season?: string;
        /**
         * Insert Hydration(s) to return data for any available team hydration. Format "league,venue"
         *  1. One Hydration: https://statsapi.mlb.com/api/v1/teams/affiliates?season=2018&teamIds=147&sportId=1&hydrate=league
         *  2. Multiple Hydrations: https://statsapi.mlb.com/api/v1/teams/affiliates?season=2018&teamIds=147&sportId=1&hydrate=league,venue
         *  3. Check For Available Hydrations: https://statsapi.mlb.com/api/v1/teams/affiliates?season=2018&teamIds=147&sportId=1&hydrate=hydrations
         *
         *    - Available Hydrations:
         *
         *      1. previousSchedule(inclusive=true)
         *      2. nextSchedule
         *      3. venue
         *      4. social
         *      5. deviceProperties
         *      6. game(promotions)
         *      7. game(atBatPromotions)
         *      8. game(tickets)
         *      9. game(atBatTickets)
         *      10. game(sponsorships)
         *      11. league
         *      12. person
         *      13. sport
         *      14. division
         */
        hydrate?: string[];
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/teams/affiliates?teamIds=147&hydrate=league&fields=teams,id,name
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": unknown;
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   *  This endpoint returns a team directory based on teamId.
   *
   *  **Return Includes:** League,division,sport and venue information for each team.
   *
   *  **Required Parameters:** teamId is required to run this call.
   *
   *  **Hydrations:** This endpoint can accept the hydrations query parameter.
   *
   *
   *
   *  ---
   *  **Example of call with required parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams/147
   *
   *  ---
   *  **Example of call with hydrated parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams/147?hydrate=league
   */
  teamId: {
    parameters: {
      path: {
        /**
         * Insert teamId to return a directory of team information for a particular club.
         *  1. Insert teamId: https://statsapi.mlb.com/api/v1/teams/147
         *
         *  For a list of all teamIds:  https://statsapi.mlb.com/api/v1/teams
         */
        teamId: string;
      };
      query: {
        /**
         * Insert year to return a directory of team information for a particular club in a specific season.
         *  1. Insert year: https://statsapi.mlb.com/api/v1/teams/147?season=1960
         */
        season?: string;
        /**
         * Insert a sportId to return a directory of team information for a particular club in a sport.
         *   1. Insert sportId:  https://statsapi.mlb.com/api/v1/teams/147?season=1960&sportId=1
         *
         *   For  a list of all sportIds:  http://statsapi.mlb.com/api/v1/sports
         */
        sportId?: number;
        /**
         * Insert Hydration(s) to return data for any available team hydration. Format "league,venue"
         *  1. One Hydration: https://statsapi.mlb.com/api/v1/teams/147?season=2018&sportId=1&hydrate=league
         *  2. Multiple Hydrations: https://statsapi.mlb.com/api/v1/teams/147?season=2018&sportId=1&hydrate=league,social
         *  3. Check For Available Hydrations: https://statsapi.mlb.com/api/v1/teams/147?season=2018&sportId=1&hydrate=hydrations
         *
         *    - Available Hydrations:
         *
         *      1. previousSchedule(inclusive=true)
         *      2. nextSchedule
         *      3. venue
         *      4. social
         *      5. deviceProperties
         *      6. game(promotions)
         *      7. game(atBatPromotions)
         *      8. game(tickets)
         *      9. game(atBatTickets)
         *      10. game(sponsorships)
         *      11. league
         *      12. person
         *      13. sport
         *      14. division
         */
        hydrate?: string[];
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/teams/147?fields=teams,name,id,league,division
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": unknown;
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   *  This endpoint returns a team directory based on teamId.
   *
   *  **Return Includes:** Team season statistics.
   *
   *  **Required Parameters:** stat group, season, and stats are required to run this call.
   *
   *  **Hydrations:** This endpoint can accept the hydrations query parameter.
   *
   *
   *
   *  ---
   *  **Example of call with required parameters**
   *
   *  http://statsapi.mlb.com/api/v1/teams/137/stats?group=hitting&stats=season&season=2019
   *
   *  ---
   *  **Example of call with hydrated parameters**
   *
   *  http://statsapi.mlb.com/api/v1/teams/137/stats?group=hitting&stats=season&season=2019
   */
  teamIdIndividualStats: {
    parameters: {
      path: {
        /**
         * Insert teamId to return a directory of team information for a particular club.
         *  1. Insert teamId: https://statsapi.mlb.com/api/v1/teams/137/stats?group=hitting&stats=season&season=2018
         *
         *  For a list of all teamIds:  https://statsapi.mlb.com/api/v1/teams
         */
        teamId: string;
      };
      query: {
        /**
         * Insert year to return team stats for a particular season.
         *  1. Insert year: http://statsapi.mlb.com/api/v1/teams/137/stats?group=hitting&stats=season&season=2018
         */
        season: string;
        /**
         * Insert statGroup with the group parameter to return team stats for a particular statGroup.
         *  1. Insert statGroup: http://statsapi.mlb.com/api/v1/teams/137/stats?group=hitting&stats=season&season=2018&sportIds=1
         *
         *  For a list of all statGroups: https://statsapi.mlb.com/api/v1/statGroups
         */
        statGroup: string;
        /**
         * Insert gameType to return team stats for a particular gameType.
         *  1. Insert gameType: http://statsapi.mlb.com/api/v1/teams/137/stats?group=hitting&stats=season&season=2018&sportIds=1&gameType=R
         *
         *  For a list of all gameTypes: https://statsapi.mlb.com/api/v1/gameTypes
         */
        gameType?: string;
        /**
         * Insert stats to return team stats for a particular statType and statGroup.
         *  1. Insert one statType one statGroup: http://statsapi.mlb.com/api/v1/teams/137/stats?group=hitting&stats=season&season=2018&sportIds=1&gameType=R
         *  2. Insert multiple statTypes and statGroups: http://statsapi.mlb.com/api/v1/teams/137/stats?group=pitching,hitting&stats=season,seasonAdvanced&season=2018&sportIds=1&gameType=R
         *
         *  **For a list of all statTypes: https://statsapi.mlb.com/api/v1/statTypes**
         *
         *  **For a list of all statGroups: https://statsapi.mlb.com/api/v1/statGroups**
         *
         *    - Notes on statSplits statType
         *
         *      Best practice for MLB sitCodes, use stats=statSplits&sitCodes="sitCode".
         *
         *      1. Team batting statistics batting right: http://statsapi.mlb.com/api/v1/teams/137/stats?group=hitting&season=2018&sportIds=1&stats=statSplits&sitCodes=r
         *
         *      **For a list of all sitCodes: https://statsapi.mlb.com/api/v1/situationCodes**
         */
        stats?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: http://statsapi.mlb.com/api/v1/teams/137/stats?group=hitting&stats=season&season=2019&fields=stats,type,displayName,splits,stat,homeRuns
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": unknown;
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   *  This endpoint allows you to return directory of affiliates for a given team.
   *
   *  **Return Includes:** League,division,sport and venue information for each team.
   *
   *  **Required Parameters:** teamId is required to run this call.
   *
   *  **Hydrations:** This endpoint can accept the hydrations query parameter.
   *
   *
   *
   *  ---
   *  **Example of call with required parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams/147/affiliates
   *
   *  ---
   *  **Example of call with hydrated parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams/147/affiliates?hydrate=league
   */
  TeamIdaffiliates: {
    parameters: {
      path: {
        /**
         * Insert teamId to return a directory of affiliates for a given team.
         *  1. Insert teamId: https://statsapi.mlb.com/api/v1/teams/147/affiliates
         *
         *  For a list of all teamIds:  https://statsapi.mlb.com/api/v1/teams
         */
        teamId: string;
      };
      query: {
        /**
         * Insert sportId to return a directory of affiliates for a given team in a particular sport.
         *  1. Insert sportId: https://statsapi.mlb.com/api/v1/teams/147/affiliates?sportId=1
         *
         *  For a list of all sportIds:  https://statsapi.mlb.com/api/v1/sports
         */
        sportId?: number;
        /**
         * Insert year to return a directory of affiliates for a particular club in a particular season.
         *  1. Insert year: https://statsapi.mlb.com/api/v1/teams/147/affiliates?season=2017
         */
        season?: string;
        /**
         * Insert Hydration(s) to return data for any available team hydration. Format "league,venue"
         *  1. One Hydration: https://statsapi.mlb.com/api/v1/teams/147/affiliates?season=2018&sportId=1&hydrate=league
         *  2. Multiple Hydrations: https://statsapi.mlb.com/api/v1/teams/147/affiliates?season=2018&sportId=1&hydrate=league,social
         *  3. Check For Available Hydrations: https://statsapi.mlb.com/api/v1/teams/147/affiliates?season=2018&sportId=1&hydrate=hydrations
         *
         *    - Available Hydrations:
         *
         *      1. previousSchedule(inclusive=true)
         *      2. nextSchedule
         *      3. venue
         *      4. social
         *      5. deviceProperties
         *      6. game(promotions)
         *      7. game(atBatPromotions)
         *      8. game(tickets)
         *      9. game(atBatTickets)
         *      10. game(sponsorships)
         *      11. league
         *      12. person
         *      13. sport
         *      14. division
         */
        hydrate?: string[];
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/teams/109/affiliates?season=2018&fields=teams,name
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": unknown;
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   *  This endpoint allows you to return directory of active alumni for a given team.
   *
   *  **Return Includes:** biographical information.
   *
   *  **Required Parameters:** teamId,season & statGroup are required to run this call.
   *
   *  **Hydrations:** This endpoint can accept the hydrations query parameter.
   *
   *
   *
   *  ---
   *  **Example of call with required parameters**
   *
   *  http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting
   *
   *  ---
   *  **Example of call with hydrated parameters**
   *
   *  http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=rosterEntries
   */
  alumni: {
    parameters: {
      path: {
        /**
         * Insert teamId to return a directory of alumni for a given team.
         *  1. Insert teamId: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting
         *
         *  For a list of all teamIds:  https://statsapi.mlb.com/api/v1/teams
         */
        teamId: string;
      };
      query: {
        /**
         * Insert year to return a directory of alumni for a particular club in a particular season.
         *  1. Insert year: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting
         */
        season: string;
        /**
         * Insert statGroup with the group parameter to return a directory of alumni for a given team based on statistical grouping.
         *  1. Insert statGroup: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting
         *
         *  For a list of all statGroups:  https://statsapi.mlb.com/api/v1/statGroups
         */
        group: string;
        /**
         * Insert Hydration(s) to return data for any available team hydration. The hydrations for Teams contain "person" and "team" which have subhydrations Format "team(subHydration1, subHydrations2)" "
         *  1. One Hydration Using Team Sub Hydration: https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=team(league)
         *  2. Multiple Hydrations Using Team Sub Hydration: https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=team(league,venue)
         *  3. Multiple Hydrations Using Team & Stat Sub Hydrations: https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(transactions),team(league)
         *  4. Check For Available Hydrations: https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=hydrations
         *
         *
         *    - Available Hydrations:
         *
         *       1. hydrations
         *       2. awards
         *       3. currentTeam
         *       4. team
         *       5. rosterEntries
         *       6. jobs
         *       7. relatives
         *       8. transactions
         *       9. social
         *       10. education
         *       11. stats
         *       12. draft
         *       13. mixedFeed
         *       14. articles
         *       15. videos
         *       16. xrefId
         *
         *
         *
         *   - Notes on "currentTeam" hydration:
         *
         *     When hydrating for "currentTeam" users can use the 'appContext' parameter to specify most recent team by league
         *      1. Most Recent Major League Team: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=currentTeam&appContext=majorLeague
         *      2. Most Recent Minor League Team: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=currentTeam&appContext=minorLeague
         *
         *
         *
         *   - Notes on Stat Hydrations:
         *
         *     Best practice for MLB stat hydrations, use person(stats(group=["statGroup1","statGroup2"],type=["statType1","statType2"])).
         *
         *      1. Hydrating one stat:  http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=stats(group=[hitting],type=[career])
         *      2. Hydrating multiple statTypes/statGroups:  http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=stats(group=[hitting,pitching],type=[career,yearByYear])
         *
         *           **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *           **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for MLB individual stat hydrations, use person(stats(group=["statGroup1","statGroup2"],type=["statType1","statType2"],season="year")).
         *
         *      1. Hydrating one stat:  http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=stats(group=[hitting],type=[season],season=2018)
         *      2. Hydrating multiple statTypes/statGroups:  http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=stats(group=[hitting,pitching],type=[season,seasonAdvanced],season=2018)
         *
         *           **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *           **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for MiLB stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=["statType1","statType2],sportId="MiLB Id")).
         *
         *      1. Hydrating one stat:  http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=stats(group=[hitting,pitching],type=[career],sportId=12),hydrations
         *      2. Hydrating multiple statTypes/statGroups:  http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=stats(group=[hitting,pitching],type=[career,yearByYear],sportId=12),hydrations
         *
         *            **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *            **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *            **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for MiLB stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=["statType1","statType2],sportId="MiLB Id",season=2018)).
         *
         *      1. Hydrating one stat:  http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=stats(group=[hitting,pitching],type=[season],sportId=12,season=2018),hydrations
         *      2. Hydrating multiple statTypes/statGroups:  http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=stats(group=[hitting,pitching],type=[season,seasonAdvanced],sportId=12,season=2018),hydrations
         *
         *            **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *            **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *            **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for season stats in date range, use person(stats(group=["statGroup1","statGroup2"],type=["byDateRange"]startDate="mm/dd/yyyy",endDate="mm/dd/yyyy",season="year")).
         *
         *      1. Hydrating byDateRange stat: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=stats(group=[hitting,pitching],type=[byDateRange],startDate=05/17/2018,endDate=09/21/2018,season=2018)
         *
         *          **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *          **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for player vs. player stats, use person(stats(group=["statGroup1","statGroup2"],type=["vsPlayer"],opposingPlayerId="personId",season="year",sportId="sportId").
         *
         *     1. Hydrating vsPlayer stat: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=pitching&hydrate=stats(group=[pitching],type=[vsPlayer],opposingPlayerId=453568,season=2018,sportId=1)
         *
         *          **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *          **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *          **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *     Best practice for player vs. team stats, use stats(group=["statGroup1","statGroup2"],type=["vsTeam"],opposingTeamId="teamId",season="year",sportId="sportId").
         *
         *     1. Hydrating vsTeam stat: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=pitching&hydrate=stats(group=[pitching],type=[vsTeam],opposingTeamId=141,season=2018,sportId=1)
         *
         *          **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *          **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *          **List of teamIds can be found at http://statsapi.mlb.com/api/v1/teams**
         *
         *          **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *     Best practice for limiting playLog & pitchLog, use stats(group=["statGroup1","statGroup2"],type=["playLog"],limit=1,season="year").
         *
         *     1. Limiting playLog: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=pitching&hydrate=stats(group=[hitting,pitching],type=[playLog],limit=1,season=2017)
         *
         *     2. Limiting pitchLog:http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=pitching&hydrate=stats(group=[hitting,pitching],type=[pitchLog],limit=1,season=2017)
         *
         *          **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *          **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for metrics in stat hydrations, use person(stats(type=metricAverages,metrics=launchSpeed,season=2018)) or person(stats(type=metricLog,metrics=launchSpeed,season=2018)).
         *
         *     1. Hydrating one metric with metricAverages: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=pitching&hydrate=stats(group=[hitting,pitching],type=[metricAverages],metrics=launchSpeed,season=2018),hydrations
         *     2. Hydrating one statType and multiple metrics with metricAverages: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=pitching&hydrate=stats(group=[hitting,pitching],type=[career,metricAverages],metrics=[launchSpeed,launchAngle],season=2018),hydrations
         *     3. Hydrating one metric with metricLog: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=pitching&hydrate=stats(group=[hitting,pitching],type=[metricLog],metrics=launchSpeed,season=2018),hydrations
         *     4. Hydrating one statType and multiple metrics with metricLog: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=pitching&hydrate=stats(group=[hitting,pitching],type=[career,metricLog],metrics=[launchSpeed,launchAngle],season=2018),hydrations
         *
         *        **List of metrics can be found at https://statsapi.mlb.com/api/v1/metrics**
         *
         *     Best practice for MLB sitCodes in stat hydrations, use stats(type=statSplits,sitCodes=[h,a],season=2018).
         *
         *     1. Hydrating one sitCode: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=stats(group=[hitting,pitching],type=[statSplits],sitCodes=h,season=2018),hydrations
         *     2. Hydrating one statType and multiple sitCodes: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&hydrate=stats(group=[hitting,pitching],type=[career,statSplits],sitCodes=[h,a],season=2018),hydrations
         *
         *        **List of sitCodes can be found at https://statsapi.mlb.com/api/v1/situationCodes**
         *
         *     Best practice for MiLB sitCodes in stat hydrations, use stats(type=statSplits,sitCodes=[h,a],season=2018,sportId = "MiLB Id").
         *
         *     1. Hydrating one sitCode: http://statsapi.mlb.com/api/v1/teams/260/alumni?season=2018&group=hitting&hydrate=stats(group=[hitting,pitching],type=[career,statSplits],sitCodes=[h],season=2018),hydrations
         *     2. Hydrating one statType and multiple sitCodes: http://statsapi.mlb.com/api/v1/teams/260/alumni?season=2018&group=hitting&hydrate=stats(group=[hitting,pitching],type=[career,statSplits],sitCodes=[h,a],season=2018),hydrations
         *
         *        **List of sitCodes can be found at https://statsapi.mlb.com/api/v1/situationCodes**
         *
         *        **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         */
        hydrate?: string[];
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: http://statsapi.mlb.com/api/v1/teams/147/alumni?season=2018&group=hitting&fields=people,fullName
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PeopleRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   *  This endpoint allows you return a directory of coaches for a particular team.
   *
   *  **Return Includes:** fullName, job,jobID and profile link.
   *
   *  **Required Parameters:** teamId is required to run this call.
   *
   *  ---
   *  **Example of call with required parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams/109/coaches
   */
  TeamIdcoaches: {
    parameters: {
      path: {
        /**
         * Insert teamId to return a directory of coaches for a given team.
         *  1. Insert teamId: https://statsapi.mlb.com/api/v1/teams/147/coaches
         *
         *  For a list of all teamIds:  https://statsapi.mlb.com/api/v1/teams
         */
        teamId: number;
      };
      query: {
        /**
         * Insert year to return a directory of coaches for a particular club in a particular season.
         *  1. Insert year: https://statsapi.mlb.com/api/v1/teams/147/coaches?season=2017
         */
        season?: string;
        /**
         * Insert date to return a directory of coaches for a particular club on a particular date.
         *  1. Insert date: https://statsapi.mlb.com/api/v1/teams/109/coaches?date=08/28/2016
         */
        date?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/teams/109/coaches?fields=roster,person,fullName
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["RosterRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   *  This endpoint allows you return a directory of personnel for a particular team.
   *
   *  **Return Includes:** fullName, job,jobID and profile link.
   *
   *  **Required Parameters:** teamId is required to run this call.
   *
   *  ---
   *  **Example of call with required parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams/109/personnel
   */
  TeamIdpersonnel: {
    parameters: {
      path: {
        /**
         * Insert teamId to return a directory of personnel for a given team.
         *  1. Insert teamId: https://statsapi.mlb.com/api/v1/teams/147/personnel
         *
         *  For a list of all teamIds:  https://statsapi.mlb.com/api/v1/teams
         */
        teamId: number;
      };
      query: {
        /**
         * Insert date to return a directory of personnel for a particular club on a particular date.
         *  1. Insert date: https://statsapi.mlb.com/api/v1/teams/109/personnel?date=08/28/2016
         */
        date?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/teams/109/personnel?fields=roster,person,fullName
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["RosterRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   *  This endpoint returns statistical data for a team's top performers information based on League Leader Categories.
   *
   *  **Return Includes:** Player biographical and statistical information.
   *
   *  **Required Parameters:** teamdId,season, and leaderCategories is required to run this call.
   *
   *  **Hydrations:** This endpoint can accept the hydrations query parameter.
   *
   *
   *
   *  ---
   *  **Example of call with required parameters**
   *
   *   https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018
   *
   *  ---
   *  **Example of call with hydration parameters**
   *
   *   https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=team(league),hydrations
   */
  teamleaders: {
    parameters: {
      path: {
        /**
         * Insert a teamId to return information  and ranking for a particular statistic.
         *  1. Insert teamId: https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018
         *
         *  For a list of all teamIds:  https://statsapi.mlb.com/api/v1/teams
         */
        teamId: string;
      };
      query: {
        /**
         * Insert a league leader category to return information  and ranking for a particular statistic.
         *   1. Insert leaderCategories:  https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018
         *
         *   For  a list of all leaderCategories:  https://statsapi.mlb.com/api/v1/leagueLeaderTypes
         */
        leaderCategories: string;
        /**
         * Insert year to return information  and ranking for a particular statistic in a given year.
         *  1. Insert year: https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018
         */
        season: string;
        /**
         * Insert a game type to return information  and ranking for a particular statistic in a particular game type.
         *   1. Insert gameType: https://statsapi.mlb.com/api/v1/teams/147/leaders?leaderCategories=homeRuns&season=2017&leaderGameTypes=D
         *
         *   For a list of all gameTypes: https://statsapi.mlb.com/api/v1/gameTypes
         */
        leaderGameTypes?: string;
        /**
         * Insert Hydration(s) to return data for any available team hydration. The hydrations for Teams contain "person" and "team" which have subhydrations Format "team(subHydration1, subHydrations2)" "
         *  1. One Hydration Using Team Sub Hydration: https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=team(league)
         *  2. Multiple Hydrations Using Team Sub Hydration: https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=team(league,venue)
         *  3. Multiple Hydrations Using Team & Stat Sub Hydrations: https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(transactions),team(league)
         *  4. Check For Available Hydrations: https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=hydrations
         *
         *
         *    - Available Hydrations:
         *
         *       1. person
         *          - Hydrations Available Through Person
         *            1. hydrations
         *            2. awards
         *            3. currentTeam
         *            4. team
         *            5. rosterEntries
         *            6. jobs
         *            7. relatives
         *            8. transactions
         *            9. social
         *            10. education
         *            11. stats
         *            12. draft
         *            13. mixedFeed
         *            14. articles
         *            15. videos
         *            16. xrefId
         *
         *       2. team
         *          - Hydrations Available Through Team
         *            1. hydrations
         *            2. previousSchedule(inclusive=true)
         *            3. nextSchedule
         *            4. venue
         *            5. springVenue
         *            6. social
         *            7. deviceProperties
         *            8. game(promotions)
         *            9. game(promotions)
         *            10. game(atBatPromotions)
         *            11. game(tickets)
         *            12. game(atBatTickets)
         *            13. game(sponsorships)
         *            14. league
         *            15. videos
         *            16. person
         *            17. sport
         *            18. standings
         *            18. division
         *            19. xref
         *
         *   - Notes on "currentTeam" hydration:
         *
         *     When hydrating for "currentTeam" users can use the 'appContext' parameter to specify most recent team by league
         *      1. Most Recent Major League Team: https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(appContext=majorLeague,currentTeam)
         *      2. Most Recent Minor League Team: https://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(appContext=minorLeague,currentTeam)
         *
         *
         *
         *    - Notes on Stat Hydrations:
         *
         *     Best practice for MLB stat hydrations, use person(stats(group=["statGroup1","statGroup2"],type=["statType1","statType2"])).
         *
         *      1. Hydrating one stat:  http://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting],type=[career])%3A%29
         *      2. Hydrating multiple statTypes/statGroups:  http://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,yearByYear])%3A%29
         *
         *           **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *           **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for MLB individual stat hydrations, use person(stats(group=["statGroup1","statGroup2"],type=["statType1","statType2"],season="year")).
         *
         *      1. Hydrating one stat:  http://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting],type=[season],season=2018)%3A%29
         *      2. Hydrating multiple statTypes/statGroups:  http://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[season,seasonAdvanced],season=2018)%3A%29
         *
         *           **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *           **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for MiLB stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=["statType1","statType2],sportId="MiLB Id")).
         *
         *      1. Hydrating one stat:  http://statsapi.mlb.com/api/v1/teams/260/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting],type=career,sportId=12)%3A%29
         *      2. Hydrating multiple statTypes/statGroups:  http://statsapi.mlb.com/api/v1/teams/260/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,yearByYear],sportId=12)),hydrations
         *
         *            **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *            **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *            **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for MiLB stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=["statType1","statType2],sportId="MiLB Id",season=2018)).
         *
         *      1. Hydrating one stat:  http://statsapi.mlb.com/api/v1/teams/260/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting],type=career,sportId=12,season=2018)%3A%29
         *      2. Hydrating multiple statTypes/statGroups:  http://statsapi.mlb.com/api/v1/teams/260/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,yearByYear],sportId=12,season=2018)),hydrations
         *
         *            **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *            **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *            **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for season stats in date range, use person(stats(group=["statGroup1","statGroup2"],type=["byDateRange"]startDate="mm/dd/yyyy",endDate="mm/dd/yyyy",season="year")).
         *
         *      1. Hydrating byDateRange stat: http://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[byDateRange],startDate=05/17/2018,endDate=05/21/2018,season=2018)%3A%29
         *
         *          **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *          **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for player vs. player stats, use person(stats(group=["statGroup1","statGroup2"],type=["vsPlayer"],opposingPlayerId="personId",season="year",sportId="sportId").
         *
         *     1. Hydrating vsPlayer stat: https://statsapi.mlb.com/api/v1/teams/140/leaders?leaderCategories=airOuts&season=2018&hydrate=person(stats(group=[pitching],type=[vsPlayer],opposingPlayerId=453568,season=2018,sportId=1)%3A%29
         *
         *          **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *          **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *          **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *     Best practice for player vs. team stats, use stats(group=["statGroup1","statGroup2"],type=["vsTeam"],opposingTeamId="teamId",season="year",sportId="sportId").
         *
         *     1. Hydrating vsTeam stat: https://statsapi.mlb.com/api/v1/teams/140/leaders?leaderCategories=airOuts&season=2018&hydrate=person(stats(group=[pitching],type=[vsTeam],opposingTeamId=147,season=2018,sportId=1)%3A%29
         *
         *          **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *          **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *          **List of teamIds can be found at http://statsapi.mlb.com/api/v1/teams**
         *
         *          **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *     Best practice for limiting playLog & pitchLog, use stats(group=["statGroup1","statGroup2"],type=["playLog"],limit=1,season="year").
         *
         *     1. Limiting playLog: http://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2017&hydrate=person(stats(group=[hitting,pitching],type=[playLog],limit=1,season=2017)%3A%29
         *
         *     2. Limiting pitchLog:http://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2017&hydrate=person(stats(group=[hitting,pitching],type=[pitchLog],limit=1,season=2017)%3A%29
         *
         *          **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *          **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for metrics in stat hydrations, use person(stats(type=metricAverages,metrics=launchSpeed,season=2018)) or person(stats(type=metricLog,metrics=launchSpeed,season=2018)).
         *
         *     1. Hydrating one metric with metricAverages: http://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[metricAverages],metrics=launchSpeed,season=2018)),hydrations
         *     2. Hydrating one statType and multiple metrics with metricAverages: http://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,metricAverages],metrics=[launchSpeed,launchAngle],season=2018)),hydrations
         *     3. Hydrating one metric with metricLog: http://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[metricLog],metrics=launchSpeed,season=2018)),hydrations
         *     4. Hydrating one statType and multiple metrics with metricLog: http://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,metricLog],metrics=[launchSpeed,launchAngle],season=2018)),hydrations
         *
         *        **List of metrics can be found at https://statsapi.mlb.com/api/v1/metrics**
         *
         *     Best practice for MLB sitCodes in stat hydrations, use stats(type=statSplits,sitCodes=[h,a],season=2018).
         *
         *     1. Hydrating one sitCode: http://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[statSplits],sitCodes=h,season=2018)),hydrations
         *     2. Hydrating one statType and multiple sitCodes: http://statsapi.mlb.com/api/v1/teams/111/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,statSplits],sitCodes=[h,a],season=2018)),hydrations
         *
         *        **List of sitCodes can be found at https://statsapi.mlb.com/api/v1/situationCodes**
         *
         *     Best practice for MiLB sitCodes in stat hydrations, use stats(type=statSplits,sitCodes=[h,a],season=2018,sportId = "MiLB Id").
         *
         *     1. Hydrating one sitCode: http://statsapi.mlb.com/api/v1/teams/260/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[statSplits],sitCodes=h,sportId=12,season=2018)),hydrations
         *     2. Hydrating one statType and multiple sitCodes: http://statsapi.mlb.com/api/v1/teams/260/leaders?leaderCategories=homeRuns&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,statSplits],sitCodes=[h,a],sportId=12,season=2018)),hydrations
         *
         *        **List of sitCodes can be found at https://statsapi.mlb.com/api/v1/situationCodes**
         *
         *        **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         */
        hydrate?: string[];
        /**
         * Insert a limit to limit return.
         * 1. Insert limit: https://statsapi.mlb.com/api/v1/teams/147/leaders?leaderCategories=homeRuns&season=2017&leaderGameTypes=D&limit=1
         */
        limit?: number;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/teams/147/leaders?leaderCategories=homeRuns&season=2017&leaderGameTypes=D&fields=teamLeaders,leaders,rank,value,person,fullName
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["TeamLeaderContainerRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   *  Insert teamId to return a directory of players based on roster status for a particular club.
   *
   *
   *  **Return Includes:** Player information for provided team.
   *
   *  **Required Parameters:** teamId, season, & rosterType is required to run this call.
   *
   *  **Hydrations:** This endpoint can accept the hydrations query parameter.
   *
   *
   *
   *
   *
   *
   *  ---
   *  **Example of call with required parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams/109/roster?rosterType=active
   *
   *  ---
   *  **Example of call with hydrated parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams/109/roster?hydrate=person(stats(type=season,season=2018),education)&rosterType=active
   */
  roster: {
    parameters: {
      path: {
        /**
         * Insert teamId to return  a directory of players based on roster status for a particular club.
         *  1. Insert teamId: https://statsapi.mlb.com/api/v1/teams/109/roster?rosterType=active&season=2018
         *
         *  For a list of all teamIds:  https://statsapi.mlb.com/api/v1/teams
         */
        teamId: string;
      };
      query: {
        /**
         * Insert teamId to return  a directory of players based on roster status for a particular club.
         *  1. Insert rosterType: https://statsapi.mlb.com/api/v1/teams/109/roster?rosterType=active&season=2018
         *
         *  For a list of all rosterType:  https://statsapi.mlb.com/api/v1/rosterTypes
         */
        rosterType: string;
        /**
         * Insert year to return a directory of players based on roster status for a particular club in a specific season.
         *  1. Insert year: https://statsapi.mlb.com/api/v1/teams/109/roster?rosterType=active&season=2018
         */
        season: string;
        /**
         * Insert date to return a directory of players based on roster status for a particular club on a specific date.
         *  1. Insert date: https://statsapi.mlb.com/api/v1/teams/109/roster?rosterType=active&season=2018&date=06/05/2018
         */
        date?: string;
        /**
         * Insert Hydration(s) to return data for any available team hydration. The hydration for Teams contains "person" which has subhydrations Format "person(subHydration1, subHydrations2)" "
         * 1. One Hydration Using Person Sub Hydration: https://statsapi.mlb.com/api/v1/teams/109/roster?rosterType=active&season=2018&&hydrate=person(social)
         * 2. Multiple Hydrations Using Person Sub Hydration: https://statsapi.mlb.com/api/v1/teams/109/roster?hydrate=person(transactions,social)&rosterType=active&season=2018
         * 3. Check For Available Hydrations: https://statsapi.mlb.com/api/v1/teams/109/roster?rosterType=active&season=2018&&hydrate=hydrations
         *
         *   - Available Hydrations:
         *
         *      1. "person"
         *         - Hydrations Available Through Person
         *           1. hydrations
         *           2. awards
         *           3. currentTeam
         *           4. team
         *           5. rosterEntries
         *           6. jobs
         *           7. relatives
         *           8. transactions
         *           9. social
         *           10. education
         *           11. stats
         *           12. draft
         *           13. mixedFeed
         *           14. articles
         *           15. videos
         *           16. xrefId
         *
         *  - Notes on "currentTeam" hydration:
         *
         *    When hydrating for "currentTeam" users can use the 'appContext' parameter to specify most recent team by league
         *     1. Most Recent Major League Team: https://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(appContext=majorLeague,currentTeam)
         *     2. Most Recent Minor League Team: https://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(appContext=minorLeague,currentTeam)
         *
         *  - Notes on Stat Hydrations:
         *
         *    Best practice for MLB stat hydrations, use person(stats(group=["statGroup1","statGroup2"],type=["statType1","statType2"])).
         *
         *     1. Hydrating one stat: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting],type=[career])%3A%29
         *     2. Hydrating multiple statTypes/statGroups: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,yearByYear])%3A%29
         *
         *         **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *         **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *    Best practice for MLB individual stat hydrations, use person(stats(group=["statGroup1","statGroup2"],type=["statType1","statType2"],season="year")).
         *
         *     1. Hydrating one stat: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting],type=[season],season=2018)%3A%29
         *     2. Hydrating multiple statTypes/statGroups: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[season,seasonAdvanced],season=2018)%3A%29
         *
         *         **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *         **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *    Best practice for MiLB stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=["statType1","statType2],sportId="MiLB Id")).
         *
         *     1. Hydrating one stat: http://statsapi.mlb.com/api/v1/teams/260/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting],type=[career],sportId=12)%3A%29
         *     2. Hydrating multiple statTypes/statGroups: http://statsapi.mlb.com/api/v1/teams/260/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,yearByYear],sportId=12)%3A%29
         *
         *           **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *           **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *           **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *    Best practice for MiLB individual stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=["statType1","statType2],sportId="MiLB Id",season="year")).
         *
         *     1. Hydrating one stat: http://statsapi.mlb.com/api/v1/teams/260/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting],type=[season],sportId=12,season=2018)%3A%29
         *     2. Hydrating multiple statTypes/statGroups: http://statsapi.mlb.com/api/v1/teams/260/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[season,seasonAdvanced],sportId=12,season=2018)%3A%29
         *
         *           **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *           **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *           **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *    Best practice for season stats in date range, use person(stats(group=["statGroup1","statGroup2"],type=["byDateRange"]startDate="mm/dd/yyyy",endDate="mm/dd/yyyy",season="year")).
         *
         *     1. Hydrating byDateRange stat: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[byDateRange],startDate=05/17/2018,endDate=05/21/2018,season=2018)%3A%29
         *
         *         **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *         **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *    Best practice for limiting playLog & pitchLog, use stats(group=["statGroup1","statGroup2"],type=["playLog"],limit=1,season="year").
         *
         *      1. Limiting playLog: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[playLog],limit=1,season=2017)%3A%29
         *
         *      2. Limiting pitchLog: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[pitchLog],limit=1,season=2017)%3A%29
         *
         *           **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *           **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *    Best practice for player vs. player stats, use person(stats(group=["statGroup1","statGroup2"],type=["vsPlayer"],opposingPlayerId="personId",season="year",sportId="sportId").
         *
         *    1. Hydrating vsPlayer stat: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[pitching],type=[vsPlayer],opposingPlayerId=453568,season=2018,sportId=1)%3A%29
         *
         *         **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *         **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *         **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *    Best practice for player vs. team stats, use stats(group=["statGroup1","statGroup2"],type=["vsTeam"],opposingTeamId="teamId",season="year",sportId="sportId").
         *
         *    1. Hydrating vsTeam stat: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[pitching],type=[vsTeam],opposingTeamId=147,season=2018,sportId=1)%3A%29
         *
         *         **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *         **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *         **List of teamIds can be found at http://statsapi.mlb.com/api/v1/teams**
         *
         *         **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *    Best practice for metrics in stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=metricAverages,metrics=launchSpeed,season=2018)) or person(stats(type=metricLog,metrics=launchSpeed,season=2018)).
         *
         *    1. Hydrating one metric with metricAverages: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[metricAverages],metrics=launchSpeed,season=2018)%3A%29
         *    2. Hydrating one statType and multiple metrics with metricAverages: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,metricAverages],metrics=[launchSpeed,launchAngle],season=2018)%3A%29
         *    3. Hydrating one metric with metricLog: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,metricLog],metrics=launchSpeed,season=2018)%3A%29
         *    4. Hydrating one statType and multiple metrics with metricLog: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,metricLog],metrics=[launchSpeed,launchAngle],season=2018)%3A%29
         *
         *       **List of metrics can be found at https://statsapi.mlb.com/api/v1/metrics**
         *
         *    Best practice for MLB sitCodes in stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=[statSplits],sitCodes=[h,a],season="year")).
         *
         *    1. Hydrating one sitCode: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[statSplits],sitCodes=[h],season=2018)),hydrations
         *    2. Hydrating one statType and multiple sitCodes: http://statsapi.mlb.com/api/v1/teams/111/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,statSplits],sitCodes=[h,a],season=2018)),hydrations
         *
         *       **List of sitCodes can be found at https://statsapi.mlb.com/api/v1/situationCodes**
         *
         *    Best practice for MiLB sitCodes in stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=statSplits,sitCodes=[h,a],sportId = "MiLB Id",season=2018)).
         *
         *    1. Hydrating one sitCode: http://statsapi.mlb.com/api/v1/teams/260/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,statSplits],sitCodes=[h],sportId=12,season=2018)),hydrations
         *    2. Hydrating one statType and multiple sitCodes: http://statsapi.mlb.com/api/v1/teams/260/roster?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,statSplits],sitCodes=[h,a],sportId=12,season=2018)),hydrations
         *
         *       **List of sitCodes can be found at https://statsapi.mlb.com/api/v1/situationCodes**
         *
         *       **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *       **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         */
        hydrate?: string[];
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/teams/109/roster?rosterType=active&season=2018&fields=roster,person,fullName
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["RosterRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   *  This endpoint returns team directorial information based on roster.
   *
   *  **Return Includes:** Player information for a provided team.
   *
   *  **Required Parameters:** teamId, season and, rosterType is required to run this call.
   *
   *  **Hydrations:** This endpoint can accept the hydrations query parameter.
   *
   *
   *
   *
   *
   *
   *  ---
   *  **Example of call with required parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams/109/roster/Active
   *
   *  ---
   *  **Example of call with hydrated parameters**
   *
   *  https://statsapi.mlb.com/api/v1/teams/109/roster/Active?season=2018&hydrate=person(stats(type=season,season=2018),education),hydrations
   */
  rosterType: {
    parameters: {
      path: {
        /**
         * Insert teamId to return  team directorial information based on roster for a particular club.
         *  1. Insert teamId: https://statsapi.mlb.com/api/v1/teams/109/roster/Active?season=2018
         *
         *  For a list of all teamIds:  https://statsapi.mlb.com/api/v1/teams
         */
        teamId: number;
        /**
         * Insert rosterType to return  team directorial information based for a particular roster.
         *  1. Insert rosterType: https://statsapi.mlb.com/api/v1/teams/109/roster/Active?season=2018
         *
         *  For a list of all rosterType:  https://statsapi.mlb.com/api/v1/rosterTypes
         */
        rosterType: string;
      };
      query: {
        /**
         * Insert year to return team directorial information based on roster a particular club in a specific season.
         *  1. Insert year: https://statsapi.mlb.com/api/v1/teams/109/roster/Active?hydrate=person(stats(type=season,season=2018),education)&season=2018
         */
        season: string;
        /**
         * Insert date to return team and their  coaching staff directorial information for a particular date.
         *  1. Insert date: https://statsapi.mlb.com/api/v1/teams/109/roster/Active?season=2000&hydrate=person(stats(type=season,season=2000),education)&date=06/05/2000
         */
        date?: string;
        /**
         * Insert Hydration(s) to return data for any available team hydration. The hydrations for Teams contain "person" and "team" which have subhydrations Format "team(subHydration1, subHydrations2)" "
         *  1. One Hydration Using Person Sub Hydration: https://statsapi.mlb.com/api/v1/teams/109/roster/Active?season=2018&hydrate=person(transactions%3A%29
         *  2. Multiple Hydrations Using Person Sub Hydration: https://statsapi.mlb.com/api/v1/teams/109/roster/Active?season=2018&hydrate=person(transactions,social%3A%29
         *  3. Check For Available Hydrations: https://statsapi.mlb.com/api/v1/teams/109/roster/Active?season=2018&hydrate=hydrations
         *
         *    - Available Hydrations:
         *
         *       1. "person"
         *          - Hydrations Available Through Person
         *            1. hydrations
         *            2. awards
         *            3. currentTeam
         *            4. team
         *            5. rosterEntries
         *            6. jobs
         *            7. relatives
         *            8. transactions
         *            9. social
         *            10. education
         *            11. stats
         *            12. draft
         *            13. mixedFeed
         *            14. articles
         *            15. videos
         *            16. xrefId
         *
         *
         *   - Notes on "currentTeam" hydration:
         *
         *     When hydrating for "currentTeam" users can use the 'appContext' parameter to specify most recent team by league
         *      1. Most Recent Major League Team: https://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(appContext=majorLeague,currentTeam)
         *      2. Most Recent Minor League Team: https://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(appContext=minorLeague,currentTeam)
         *
         *   - Notes on Stat Hydrations:
         *
         *     Best practice for MLB stat hydrations, use person(stats(group=["statGroup1","statGroup2"],type=["statType1","statType2"])).
         *
         *      1. Hydrating one stat: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[hitting],type=[career])%3A%29
         *      2. Hydrating multiple statTypes/statGroups: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,yearByYear])%3A%29
         *
         *          **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *          **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for MLB individual stat hydrations, use person(stats(group=["statGroup1","statGroup2"],type=["statType1","statType2"],season="year")).
         *
         *      1. Hydrating one stat: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[hitting],type=[season],season=2018)%3A%29
         *      2. Hydrating multiple statTypes/statGroups: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?rosterType=active&season=2018&hydrate=person(stats(group=[hitting,pitching],type=[season,seasonAdvanced],season=2018)%3A%29
         *
         *          **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *          **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for MiLB stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=["statType1","statType2],sportId="MiLB Id")).
         *
         *      1. Hydrating one stat: http://statsapi.mlb.com/api/v1/teams/260/roster/Active?season=2018&hydrate=person(stats(group=[hitting],type=[career],sportId=12)%3A%29
         *      2. Hydrating multiple statTypes/statGroups: http://statsapi.mlb.com/api/v1/teams/260/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,yearByYear],sportId=12)%3A%29
         *
         *            **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *            **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *            **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for MiLB individual stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=["statType1","statType2],sportId="MiLB Id",season="year")).
         *
         *      1. Hydrating one stat: http://statsapi.mlb.com/api/v1/teams/260/roster/Active?season=2018&hydrate=person(stats(group=[hitting],type=[season],sportId=12,season=2018)%3A%29
         *      2. Hydrating multiple statTypes/statGroups: http://statsapi.mlb.com/api/v1/teams/260/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[season,seasonAdvanced],sportId=12,season=2018)%3A%29
         *
         *            **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *            **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *            **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for season stats in date range, use person(stats(group=["statGroup1","statGroup2"],type=["byDateRange"]startDate="mm/dd/yyyy",endDate="mm/dd/yyyy",season="year")).
         *
         *      1. Hydrating byDateRange stat: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[byDateRange],startDate=05/17/2018,endDate=05/21/2018,season=2018)%3A%29
         *
         *          **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *          **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for limiting playLog & pitchLog, use stats(group=["statGroup1","statGroup2"],type=["playLog"],limit=1,season="year").
         *
         *       1. Limiting playLog: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[playLog],limit=1,season=2017)%3A%29
         *
         *       2. Limiting pitchLog: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[pitchLog],limit=1,season=2017)%3A%29
         *
         *            **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *            **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *     Best practice for player vs. player stats, use person(stats(group=["statGroup1","statGroup2"],type=["vsPlayer"],opposingPlayerId="personId",season="year",sportId="sportId").
         *
         *     1. Hydrating vsPlayer stat: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[pitching],type=[vsPlayer],opposingPlayerId=453568,season=2018,sportId=1)%3A%29
         *
         *          **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *          **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *          **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *     Best practice for player vs. team stats, use stats(group=["statGroup1","statGroup2"],type=["vsTeam"],opposingTeamId="teamId",season="year",sportId="sportId").
         *
         *     1. Hydrating vsTeam stat: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[pitching],type=[vsTeam],opposingTeamId=147,season=2018,sportId=1)%3A%29
         *
         *          **List of statTypes can be found at https://statsapi.mlb.com/api/v1/statTypes**
         *
         *          **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         *
         *          **List of teamIds can be found at http://statsapi.mlb.com/api/v1/teams**
         *
         *          **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *     Best practice for metrics in stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=metricAverages,metrics=launchSpeed,season=2018)) or person(stats(type=metricLog,metrics=launchSpeed,season=2018)).
         *
         *     1. Hydrating one metric with metricAverages: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[metricAverages],metrics=launchSpeed,season=2018)%3A%29
         *     2. Hydrating one statType and multiple metrics with metricAverages: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,metricAverages],metrics=[launchSpeed,launchAngle],season=2018)%3A%29
         *     3. Hydrating one metric with metricLog: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,metricLog],metrics=launchSpeed,season=2018)%3A%29
         *     4. Hydrating one statType and multiple metrics with metricLog: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,metricLog],metrics=[launchSpeed,launchAngle],season=2018)%3A%29
         *
         *        **List of metrics can be found at https://statsapi.mlb.com/api/v1/metrics**
         *
         *     Best practice for MLB sitCodes in stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=[statSplits],sitCodes=[h,a],season="year")).
         *
         *     1. Hydrating one sitCode: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[statSplits],sitCodes=[h],season=2018)),hydrations
         *     2. Hydrating one statType and multiple sitCodes: http://statsapi.mlb.com/api/v1/teams/111/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,statSplits],sitCodes=[h,a],season=2018)),hydrations
         *
         *        **List of sitCodes can be found at https://statsapi.mlb.com/api/v1/situationCodes**
         *
         *     Best practice for MiLB sitCodes in stat hydrations, use person(stats(group=["statGroup1,statGroup2"],type=statSplits,sitCodes=[h,a],sportId = "MiLB Id",season=2018)).
         *
         *     1. Hydrating one sitCode: http://statsapi.mlb.com/api/v1/teams/260/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,statSplits],sitCodes=[h],sportId=12,season=2018)),hydrations
         *     2. Hydrating one statType and multiple sitCodes: http://statsapi.mlb.com/api/v1/teams/260/roster/Active?season=2018&hydrate=person(stats(group=[hitting,pitching],type=[career,statSplits],sitCodes=[h,a],sportId=12,season=2018)),hydrations
         *
         *        **List of sitCodes can be found at https://statsapi.mlb.com/api/v1/situationCodes**
         *
         *        **List of sportIds can be found at http://statsapi.mlb.com/api/v1/sports**
         *
         *        **List of statGroups can be found at https://statsapi.mlb.com/api/v1/statGroups**
         */
        hydrate?: string[];
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/teams/109/roster/Active?season=2018&&fields=roster,person,fullName
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["RosterRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
}

export interface external {}

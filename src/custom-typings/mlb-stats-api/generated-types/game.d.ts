/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1.1/game/{gamePk}/feed/live": {
    /**
     * **Description:**
     * This endpoint returns the Gumbo Live Feed for a specific gamePk.
     *
     * **Return Includes:** Team information, live play by play data, and player information.
     *
     * **Required Parameters:** gamePk is required to run this call.
     *
     * **Hydrations:** This endpoint can accept the hydrations query parameter.
     *
     * <br></br>
     *
     * ---
     * **Example of call with required parameters:**
     *
     * https://statsapi.mlb.com/api/v1.1/game/534196/feed/live
     *
     * ---
     * **Example of call with all parameters:**
     *
     * https://statsapi.mlb.com/api/v1.1/game/534196/feed/live?timecode=20180323_014415&hydrate=alignment
     */
    get: operations["liveGameV1"];
  };
  "/v1.1/game/{gamePk}/feed/live/diffPatch": {
    /**
     * **Description:**
     * This endpoint returns the difference/discrepancies between two timecodes in the Gumbo Live Feed using the Diff Patch System.
     *
     * **Return Includes:** Play by play data and player information.
     * <br/><br/><b>Diff/Patch
     * System:</b> startTimecode and endTimecode can be used for getting
     * diffs.<br/>Expected usage:  <br/> 1) Request full payload by not passing
     * startTimecode or endTimecode.  This will return the most recent game
     * state.<br/> 2) Find the latest timecode in this response.  <br/> 3) Wait
     * X seconds<br/> 4) Use the timecode from step 2 above as the startTimecode.  This
     * will give you a diff of everything that has happened since
     * startTimecode.  <br/> 5) If no data is returned, wait X seconds and do
     * the same request.  <br/> 6) If data is returned, get a new timeStamp
     * from the response, and use that for the next call as startTimecode.
     * <br></br>
     * **Required Parameters:** all parameters are required to run this call. If incorrectly called the call will default to http://statsapi.mlb.com/api/v1.1/game/531304/feed/live
     * <br></br>
     *
     * ---
     * **Example of call with required parameters:**
     *
     * http://statsapi.mlb.com/api/v1.1/game/531321/feed/live/diffPatch?startTimecode=20180823_193704&endTimecode=20180823_193711
     */
    get: operations["liveGameDiffPatchV1"];
  };
  "/v1.1/game/{gamePk}/feed/live/timestamps": {
    /**
     * **Description:**
     * This endpoint returns timecodes for a specific gamePk.
     *
     * **Return Includes:** timecodes.
     *
     * **Required Parameters:** gamePk is required to run this call.
     *
     * ---
     * **Example of call with required parameters:**
     *
     * https://statsapi.mlb.com/api/v1.1/game/531060/feed/live/timestamps
     */
    get: operations["liveTimestampv11"];
  };
  "/v1/game/changes": {
    /**
     * **Description:**
     * This endpoint returns a directory of games with non Statcast data corrections. These changes include, scoring/pitching decisions,etc...
     *
     * **Return Includes:** biographical information.
     *
     * **Required Parameters:** updatedSince.
     *
     * ---
     * **Example of call with required parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/changes?sportId=1&updatedSince=2020-03-17T15:34:43
     */
    get: operations["traditionalChanges"];
  };
  "/v1/game/analytics/game": {
    /**
     * **Description:**
     * This endpoint returns timestamps reflecting the most recent data corrections made to games. This return is limited to 1000 objects.
     *
     * **Return Includes:** timestamps.
     *
     * **Required Parameters:** No parameters are required to run this call.
     *
     * ---
     * **Example of call with required parameters**
     *
     * http://statsapi.mlb.com/api/v1/analytics/game
     *
     * ---
     *
     * **Example of call with all parameters**
     *
     * http://statsapi.mlb.com/api/v1/analytics/game?lastMetricsUpdatedTime=2019-01-04T00:00:00.007380Z&gameModeId=2&limit=1
     */
    get: operations["updateStatcastGames"];
  };
  "/v1/game/analytics/guids": {
    /**
     * **Description:**
     * This endpoint returns timestamps reflecting the most recent data corrections made to GUIDS. This return is limited to 1000 objects.
     *
     * **Return Includes:** timestamps.
     *
     * **Required Parameters:** No parameters are required to run this call.
     *
     * ---
     * **Example of call with required parameters**
     *
     * http://statsapi.mlb.com/api/v1/analytics/guids
     *
     * ---
     *
     * **Example of call with all parameters**
     *
     * http://statsapi.mlb.com/api/v1/analytics/guids?lastMetricsUpdatedTime=2019-01-04T00:00:00.007380Z&gameModeId=2&sortBy=lastMetricsUpdatedTime&limit=1
     */
    get: operations["updateGameGuids"];
  };
  "/v1/game/{gamePk}/guids": {
    /**
     * **Description:**
     * This endpoint returns Statcast data forall plays in a specific game.
     *
     * **Return Includes:** timestamps.
     *
     * **Required Parameters:** gamePk is required to run this call.
     *
     * ---
     * **Example of call with required parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/566685/guids?
     *
     * ---
     *
     * **Call with all parameters**
     *
     * http://statsapi.mlb.com/api/v1/game/566685/guids?lastUpdatedTime=2019-05-13T14:15:14.005620Z&gameModeId=2&isPitch=true&isHit=true&isPickoff=false&hydrate=analytics(result,hit,pitch,metrics,video,metaData)
     */
    get: operations["Statcast"];
  };
  "/v1/game/{gamePk}/{GUID}/analytics": {
    /**
     * **Description:**
     * This endpoint returns Statcast data for a specific play. Video is only available for MLB in this endpoint.
     *
     * **Return Includes:** timestamps.
     *
     * **Required Parameters:** gamePk and GUID are required to run this call.
     *
     * ---
     * **Example of call with required parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/567434/621dc1d1-aa75-4aed-b449-403bd4bcd3fa/analytics
     *
     * ---
     *
     * **Example of call with hydration parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/567434/621dc1d1-aa75-4aed-b449-403bd4bcd3fa/analytics?hydrate=hydrations,analytics(ball,metrics,video,positions,diagram,contextMetrics)
     */
    get: operations["StatcastGuids"];
  };
  "/v1/game/{gamePk}/{GUID}/analytics/skeletalData/files": {
    /**
     * **Description:**
     * This endpoint returns links for skeletalData for specific play.
     *
     * **Return Includes:** skeletalData.
     *
     * **Required Parameters:** gamePk and GUID are required to run this call.
     *
     * ---
     * **Example of call with required parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/631105/b030086b-cc1e-4842-8941-def2c5c4d94f/analytics/skeletalData/files
     */
    get: operations["skeletal"];
  };
  "/v1/game/{gamePk}/contextMetrics": {
    /**
     * **Description:**
     * This endpoint returns Context Metrics for a specific gamePk.
     *
     * **Return Includes:** Context Metircs, team information, venue information.
     *
     * **Required Parameters:** gamePk is required to run this call.
     *
     * ---
     * **Example of call with required parameters:**
     *
     * https://statsapi.mlb.com/api/v1/game/531060/contextMetrics
     *
     * ---
     * **Example of call with all parameters:**
     *
     * https://statsapi.mlb.com/api/v1/game/531060/contextMetrics?timecode=20180803_182458
     */
    get: operations["getGameContextMetrics"];
  };
  "/v1/game/{gamePk}/winProbability": {
    /**
     * **Description:**
     * This endpoint returns complete game data with win probabilities after each at bat for a specific game.
     *
     * **Return Includes:** Win probability and play by play data.
     *
     * **Required Parameters:** gamePk is required to run this call.
     *
     * ---
     * **Example of call with required parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/531060/winProbability
     *
     * ---
     * **Example of call with all parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/531060/winProbability?timecode=20180803_182458
     */
    get: operations["getWinProbability"];
  };
  "/v1/game/{gamePk}/boxscore": {
    /**
     * **Description:**
     * This endpoint returns boxscore data for a specific gamePk.
     *
     * **Return Includes:** Boxscore,play by play, and team data.
     *
     * **Required Parameters:** gamePk is required to run this call.
     *
     * ---
     * **Example of call with required parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/531060/boxscore
     *
     * ---
     * **Example of call with all parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/531060/boxscore?timecode=20180803_182458
     */
    get: operations["boxscore"];
  };
  "/v1/game/{gamePk}/content": {
    /**
     * **Description:**
     * This endpoint returns editorial content for a specific gamePk.
     *
     * **Return Includes:** Editorial pieces, highlights, images, game summary and game notes.
     *
     * **Required Parameters:** gamePk is required to run this call.
     *
     * ---
     * **Example of call with required parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/531060/content
     *
     * ---
     * **Example of call with all parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/531060/content?highlightLimit=5
     */
    get: operations["content"];
  };
  "/v1/game/{gamePk}/feed/color": {
    /**
     * **Description:**
     * This endpoint returns the color feed for a specific gamePk.
     *
     * **Return Includes:** Play by play, video, and pitch data.
     *
     * **Required Parameters:** gamePk is required to run this call.
     *
     * ---
     * **Example of call with required parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/531321/feed/color
     *
     * ---
     * **Example of call with all parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/531321/feed/color?timecode=20180803_182458
     */
    get: operations["colorFeed"];
  };
  "/v1/game/{gamePk}/feed/color/diffPatch": {
    /**
     * **Description:**
     * This endpoint returns the difference/discrepancies between two timecodes in the Color Feed using the Diff Patch System.
     *
     * **Return Includes:** Play by play data and player information.
     * <br/><br/><b>Diff/Patch
     * System:</b> startTimecode and endTimecode can be used for getting
     * diffs.<br/>Expected usage:  <br/> 1) Request full payload by not passing
     * startTimecode or endTimecode.  This will return the most recent game
     * state.<br/> 2) Find the latest timecode in this response.  <br/> 3) Wait
     * X seconds<br/> 4) Use the timecode from step 2 above as the startTimecode.  This
     * will give you a diff of everything that has happened since
     * startTimecode.  <br/> 5) If no data is returned, wait X seconds and do
     * the same request.  <br/> 6) If data is returned, get a new timeStamp
     * from the response, and use that for the next call as startTimecode.
     * <br></br>
     * **Required Parameters:** all parameters are required to run this call. If incorrectly called the call will default to http://statsapi.mlb.com/api/v1/game/531304/feed/color
     * <br></br>
     *
     * ---
     * **Example of call with required parameters:**
     *
     * http://statsapi.mlb.com/api/v1.1/game/531321/feed/live/diffPatch?startTimecode=20180822_163853&endTimecode=20180822_163938
     */
    get: operations["colorFeedDiffPatch"];
  };
  "/v1/game/{gamePk}/feed/color/timestamps": {
    /**
     * **Description:**
     * This endpoint returns timecodes for a specific gamePk.
     *
     * **Return Includes:** timecodes.
     *
     * **Required Parameters:** gamePk is required to run this call.
     *
     * ---
     * **Example of call with required parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/534101/feed/color/timestamps
     */
    get: operations["colortimecodes"];
  };
  "/v1/game/{gamePk}/linescore": {
    /**
     * **Description:**
     * This endpoint returns linescore data from a specific gamePk.
     *
     * **Return Includes:** Linescore, play by play, and team data.
     *
     * **Required Parameters:** gamePk is required to run this call.
     *
     * ---
     * **Example of call with required parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/531060/linescore
     *
     * ---
     * **Example of call with all parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/531060/linescore?timecode=20180803_182458
     */
    get: operations["linescore"];
  };
  "/v1/game/{gamePk}/playByPlay": {
    /**
     * **Description:**
     * This endpoint returns play by play data for a specific gamePk.
     *
     * **Return Includes:** play by play data.
     *
     * **Required Parameters:** gamePk is required to run this call.
     *
     * ---
     * **Example of call with required parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/531060/playByPlay
     *
     * ---
     *
     * **Example of call with all parameters**
     *
     * https://statsapi.mlb.com/api/v1/game/531060/playByPlay?timecode=20180803_182458
     */
    get: operations["playByPlay"];
  };
}

export interface components {
  schemas: {
    AdditionalBioRestObject: {
      homeTown?: string;
    };
    AnalyticsPlayMetadataRestObject: unknown;
    AnalyticsRestObject: unknown;
    AwardRestObject: {
      /**
       * Format: date
       * @description Format: YYYY-MM-DDTHH:MM:SSZ
       */
      date?: string;
      description?: string;
      history?: string;
      homePageUrl?: string;
      /** @description Unique Identifier */
      id?: string;
      imageUrl?: string;
      /** @description The league the division belongs to<br/>For a list of all leagueIds: https://statsapi.mlb.com/api/v1/leagues */
      league?: components["schemas"]["LeagueRestObject"];
      /** @description Unique Name */
      name?: string;
      notes?: string;
      /** @description All of the details of a player */
      player?: components["schemas"]["BaseballPersonRestObject"];
      recipientType?: string;
      results?: components["schemas"]["AwardResultRestObject"][];
      /** @description Season of play */
      season?: string;
      /** @description Shortened version of name. Format: AL East, SF Giants */
      shortName?: string;
      /**
       * Format: int32
       * @description The order of sorting, ascending or descending
       */
      sortOrder?: number;
      /** @description The sport the league belongs to<br/>For a list of all sportIds: https://statsapi.mlb.com/api/v1/sports */
      sport?: components["schemas"]["SportRestObject"];
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
      /** Format: int32 */
      votes?: number;
    };
    AwardResultRestObject: {
      /** Format: int32 */
      seasonId?: number;
      winners?: components["schemas"]["AwardWinnerRestObject"][];
    };
    AwardWinnerRestObject: {
      coach?: components["schemas"]["PersonRestObject"];
      /** @description All of the details of a player */
      player?: components["schemas"]["PersonRestObject"];
      rank?: string;
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
    };
    BaseballDraftProspectRestObject: {
      /**
       * Format: int32
       * @description A unique identifier for a player in the EBIS system
       */
      bisPlayerId?: number;
      /** Format: int32 */
      bisSchoolId?: number;
      blurb?: string;
      draftType?: components["schemas"]["DraftTypeEnumRestObject"];
      /** @description Links to images of person. */
      headshotLink?: string;
      home?: components["schemas"]["LocationRestObject"];
      /** @description Whether or not the players been drafted */
      isDrafted?: boolean;
      isPass?: boolean;
      /** @description All of the details of a player */
      person?: components["schemas"]["BaseballPersonRestObject"];
      /** Format: int32 */
      pickNumber?: number;
      /** @description Round in which a player was drafted */
      pickRound?: string;
      pickValue?: string;
      /** Format: int32 */
      rank?: number;
      /** Format: int32 */
      roundPickNumber?: number;
      school?: components["schemas"]["SchoolRestObject"];
      scoutingReport?: string;
      signingBonus?: string;
      /** @description All of the details of a team */
      team?: components["schemas"]["BaseballTeamRestObject"];
      /** @description Year the player was drafted. Format: 2000 */
      year?: string;
    };
    BaseballPersonRestObject: {
      alumniLastSeason?: string;
      articles?: components["schemas"]["IFeedRestObject"][];
      /** @description Bat side of hitter */
      batSide?: components["schemas"]["DynamicEnumRestObject"];
      drafts?: components["schemas"]["BaseballDraftProspectRestObject"][];
      firstLastName?: string;
      fullFMLName?: string;
      fullLFMName?: string;
      initLastName?: string;
      lastFirstName?: string;
      lastInitName?: string;
      mixedFeed?: components["schemas"]["IFeedRestObject"][];
      /** Format: date */
      mlbDebutDate?: string;
      nameSlug?: string;
      nameTitle?: string;
      note?: string;
      /** @description Handedness of pitcher */
      pitchHand?: components["schemas"]["DynamicEnumRestObject"];
      /** Format: double */
      strikeZoneBottom?: number;
      /** Format: double */
      strikeZoneTop?: number;
      transactions?: components["schemas"]["TransactionRestObject"][];
      videos?: components["schemas"]["IFeedRestObject"][];
    };
    BaseballTeamRestObject: {
      springLeague?: components["schemas"]["LeagueRestObject"];
    };
    Boxscore: {
      officials?: components["schemas"]["OfficialRestObject"][];
    };
    BroadcastRestObject: {
      callSign?: string;
      homeAway?: string;
      /** Format: int32 */
      id?: number;
      isNational?: boolean;
      language?: string;
      /** @description The name of the broadcast. Format: KWKW 1330, 95.7 FM The Game, etc */
      name?: string;
      site?: string;
      /** Format: int32 */
      sourceUrl?: number;
      /** @description The type of broadcast. Format: AM, FM, TV, etc */
      type?: string;
      videoResolution?: components["schemas"]["VideoResolutionEnumRestObject"];
    };
    Conference: unknown;
    ConferenceRestObject: {
      /**
       * Format: int32
       * @description Unique Identifier
       */
      id?: number;
      /** @description Link to full resource */
      link?: string;
      /** @description Unique Name */
      name?: string;
    };
    CoordinateRestObject: {
      coordinates?: string[];
      label?: string;
      /** Format: double */
      latitude?: number;
      /** Format: double */
      longitude?: number;
    };
    DecisionRestObject: {
      /** @description All of the details of the player who lost */
      loser?: components["schemas"]["PersonRestObject"];
      /** @description All of the details of the player who won */
      winner?: components["schemas"]["PersonRestObject"];
    };
    Division: unknown;
    DivisionRestObject: {
      /** @description Shortened version of short name. Format: ALE, SFG */
      abbreviation?: string;
      /** @description All the details of a conference */
      conference?: components["schemas"]["ConferenceRestObject"];
      /** @description Whether or not there is a wildcard */
      hasWildcard?: boolean;
      /**
       * Format: int32
       * @description Unique Identifier
       */
      id?: number;
      /** @description The league the division belongs to<br/>For a list of all leagueIds: https://statsapi.mlb.com/api/v1/leagues */
      league?: components["schemas"]["LeagueRestObject"];
      /** @description Link to full resource */
      link?: string;
      /** @description Unique Name */
      name?: string;
      /** @description Shortened version of name. Format: AL East, SF Giants */
      nameShort?: string;
      /** @description The sport the league belongs to<br/>For a list of all sportIds: https://statsapi.mlb.com/api/v1/sports */
      sport?: components["schemas"]["SportRestObject"];
    };
    DraftTypeEnumRestObject: unknown;
    DynamicEnumRestObject: {
      code?: string;
      description?: string;
      /** Format: int32 */
      sortOrder?: number;
    };
    EducationRestObject: {
      /** @description The player's college(s) */
      colleges?: components["schemas"]["SchoolRestObject"][];
      /** @description The player's highschool(s) */
      highschools?: components["schemas"]["SchoolRestObject"][];
    };
    FieldInfoRestObject: {
      /**
       * Format: int32
       * @description Number of seats in the venue.
       */
      capacity?: number;
    };
    FranchiseRestObject: {
      /** Format: int32 */
      firstSeasonId?: number;
      /** Format: int32 */
      franchiseId?: number;
      /** Format: int32 */
      lastSeasonId?: number;
      /** @description Link to full resource */
      link?: string;
      /** @description Unique Team Location. Toronto, Bronx, etc */
      locationName?: string;
      /** Format: int32 */
      mostRecentTeamId?: number;
      /** @description All of the details of a roster */
      roster?: components["schemas"]["RosterRestObject"];
      /** @description Unique Team Name. Blue Jays, Yankees, etc */
      teamName?: string;
    };
    GameContentRestObject: {
      /** @description All of the details of the game editorial */
      editorial?: components["schemas"]["GameEditorialRestObject"];
      gameNotes?: components["schemas"]["GameNotesRestObject"];
      /** @description All of the details of the game highlights */
      highlights?: components["schemas"]["GameHighlightsRestObject"];
      /** @description Link to full resource */
      link?: string;
      /** @description All of the details of the game media */
      media?: components["schemas"]["GameMediaRestObject"];
      /** @description List of boolean values for Game Content */
      summary?: components["schemas"]["GameContentSummaryRestObject"];
    };
    GameContentSummaryRestObject: {
      hasHighlightsVideo?: boolean;
      hasPreviewArticle?: boolean;
      hasRecapArticle?: boolean;
      hasWrapArticle?: boolean;
    };
    GameContextRestObject: {
      /**
       * Format: double
       * @description Away team winning probability
       */
      awayTeamWinProbability?: number;
      /** @description Expected statistics for the current batter */
      expectedStatisticsData?: components["schemas"]["StatDataRestObject"];
      /** @description Schedule information about the game */
      game?: components["schemas"]["ScheduleItemRestObject"];
      /**
       * Format: double
       * @description Home team winning probability
       */
      homeTeamWinProbability?: number;
    };
    GameDataGameRestObject: {
      /**
       * Format: int32
       * @description Unique Primary Key Representing a Game
       */
      pk?: number;
      /** @description Type of Game. Available types in /api/v1/gameTypes */
      type?: string;
    };
    GameDataRestObject: {
      /** @description Summary all date time details */
      datetime?: components["schemas"]["GameDateTimeRestObject"];
      /** @description Schedule information about the game */
      game?: components["schemas"]["GameDataGameRestObject"];
      /** @description Map of player objects */
      players?: { [key: string]: components["schemas"]["PersonRestObject"] };
      /** @description Status and state of the game.<br/>For a list of all gameStatus: https://statsapi.mlb.com/api/v1/gameStatus */
      status?: components["schemas"]["GameStatusRestObject"];
      /** @description Map of team objects */
      teams?: { [key: string]: components["schemas"]["TeamRestObject"] };
      /** @description All of the details of a venue<br/>For a list of all venueIds: https://statsapi.mlb.com/api/v1/venues */
      venue?: components["schemas"]["VenueRestObject"];
    };
    GameDateTimeRestObject: {
      /**
       * Format: date-time
       * @description Format: YYYY-MM-DDTHH:MM:SSZ
       */
      dateTime?: string;
      /**
       * Format: date-time
       * @description Format: YYYY-MM-DDTHH:MM:SSZ
       */
      endDateTime?: string;
    };
    GameEditorialRestObject: {
      /** @description Gives the articles about the game */
      articles?: components["schemas"]["JsonNode"];
      /** @description Gives the written preview of upcoming game */
      preview?: components["schemas"]["JsonNode"];
      /** @description Lists the probable starting pitchers for the game */
      probables?: components["schemas"]["JsonNode"];
      /** @description Gives the written recap of the game */
      recap?: components["schemas"]["JsonNode"];
      /** @description Gives the written wrap of the game */
      wrap?: components["schemas"]["JsonNode"];
    };
    GameHighlightsRestObject: {
      gameCenter?: components["schemas"]["JsonNode"];
      highlights?: components["schemas"]["JsonNode"];
      live?: components["schemas"]["JsonNode"];
      milestone?: components["schemas"]["JsonNode"];
      scoreboard?: components["schemas"]["JsonNode"];
      scoreboardPreview?: components["schemas"]["JsonNode"];
    };
    GameInfoRestObject: {
      /**
       * Format: int32
       * @description Number of fans at the stadium as recorded by the club.
       */
      attendance?: number;
      /**
       * Format: int32
       * @description Amount of timet he game was delayed (in seconds).
       */
      delayDurationMinutes?: number;
      /**
       * Format: date-time
       * @description Time that the first pitch was thrown.
       */
      firstPitch?: string;
      /**
       * Format: int32
       * @description Amount of time the game lasted (in seconds).
       */
      gameDurationMinutes?: number;
    };
    GameLiveDataRestObject: {
      /** @description All the details about the decisions of a game. Includes, Winner, Loser, and Save */
      decisions?: components["schemas"]["DecisionRestObject"];
      /** @description Includes all details about all the plays of a game */
      plays?: components["schemas"]["PlayByPlayRestObject"];
    };
    GameMediaRestObject: {
      /** @description Whether or not the game is enhanced */
      enhancedGame?: boolean;
      /** @description Lists the title and items for media content. Format: Title - Extended Highlights, Items - additional fields for all relevant items */
      epg?: components["schemas"]["JsonNode"];
      /** @description Lists the title and items for media content. Format: Title - Extended Highlights, Items - additional fields for all relevant items */
      epgAlternate?: components["schemas"]["JsonNode"];
      featuredMedia?: components["schemas"]["JsonNode"];
      /** @description Whether or not the game is free */
      freeGame?: boolean;
      milestones?: components["schemas"]["JsonNode"];
    };
    GameMetaDataRestObject: {
      /** @description Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS */
      timeStamp?: string;
      /**
       * Format: int32
       * @description Enter an integer for wait time
       */
      wait?: number;
    };
    GameNotesRestObject: {
      notes?: components["schemas"]["JsonNode"];
    };
    GameRestObject: {
      /** @description All the data that doesn't change during a game */
      gameData?: components["schemas"]["GameDataRestObject"];
      /**
       * Format: int32
       * @description Unique Primary Key Representing a Game
       */
      gamePk?: number;
      /** @description Link to full resource */
      link?: string;
      /** @description All the data that changes during a game */
      liveData?: components["schemas"]["GameLiveDataRestObject"];
      /** @description Change list of each version */
      metaData?: components["schemas"]["GameMetaDataRestObject"];
    };
    GameStatusRestObject: {
      /** @description Format: Preview, Live or Final */
      abstractGameState?: string;
      /** @description Single digit/letter status. Format: I = In Progress, F = Final<br/>For a list of all gameStatus: https://statsapi.mlb.com/api/v1/gameStatus */
      codedGameState?: string;
      /** @description Description of game state. Format: Delayed: Rain */
      detailedState?: string;
      /** @description Whether or not the start time is TBD */
      startTimeTBD?: boolean;
      /** @description Expanded version of coded game state. Format: IR = In Progress and Rain Delay<br/>For a list of all gameStatus: https://statsapi.mlb.com/api/v1/gameStatus */
      statusCode?: string;
    };
    GroupedStatDataRestObject: unknown;
    IFeedRestObject: unknown;
    JsonNode: unknown;
    LeadersRestObject: {
      /** @description TBD */
      leaderCategory?: string;
      /** @description The league the division belongs to<br/>For a list of all leagueIds: https://statsapi.mlb.com/api/v1/leagues */
      league?: components["schemas"]["LeagueRestObject"];
      /** @description Season of play */
      season?: string;
      /** @description Category of statistic to return. <br/>For a list of all statGroups: https://statsapi.mlb.com/api/v1/statGroups */
      statGroup?: string;
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
    };
    League: unknown;
    LeagueRestObject: {
      /** @description Shortened version of short name. Format: ALE, SFG */
      abbreviation?: string;
      /** @description Whether or not the League has Conferences */
      conferencesInUse?: boolean;
      /** @description Whether or not the League has Divisions */
      divisionsInUse?: boolean;
      /** @description True if a league uses points for standings */
      hasPlayoffPoints?: boolean;
      /** @description Whether or not there is a split season */
      hasSplitSeason?: boolean;
      /** @description Whether or not there is a wildcard */
      hasWildCard?: boolean;
      /**
       * Format: int32
       * @description Unique Identifier
       */
      id?: number;
      /** @description Link to full resource */
      link?: string;
      /** @description Unique Name */
      name?: string;
      /** @description Shortened version of name. Format: AL East, SF Giants */
      nameShort?: string;
      /**
       * Format: int32
       * @description The number of regular season games
       */
      numGames?: number;
      /**
       * Format: int32
       * @description The number of teams
       */
      numTeams?: number;
      /**
       * Format: int32
       * @description The number of wildcard teams
       */
      numWildcardTeams?: number;
      /** @description Deprecated Field */
      orgCode?: string;
      /** @description Season of play */
      season?: string;
      /** @description Dates of specific points in a season */
      seasonDateInfo?: components["schemas"]["SeasonRestObject"];
      /** @description The status of the season. Format: offseason */
      seasonState?: string;
      /**
       * Format: int32
       * @description The order of sorting, ascending or descending
       */
      sortOrder?: number;
      /** @description Time zone the venue is located in */
      timeZone?: components["schemas"]["TimeZoneRestObject"];
    };
    Linescore: unknown;
    LocationRestObject: {
      address1?: string;
      address2?: string;
      address3?: string;
      address4?: string;
      /** @description City where the venue is located. Format: Cleveland */
      city?: string;
      coordinates?: components["schemas"]["CoordinateRestObject"][];
      /** @description Filter players by their home country */
      country?: string;
      defaultCoordinates?: components["schemas"]["CoordinateRestObject"];
      postalCode?: string;
      /** @description State where the venue is located. Format: Ohio */
      state?: string;
      /** @description State abbrevation where the venue is located. Format: OH */
      stateAbbrev?: string;
    };
    MetadataRestObject: {
      /**
       * Format: int32
       * @description The at bat number of a given game. Format: 1, 2, 3, etc
       */
      atBatNumber?: number;
      /** Format: int32 */
      awayTeamId?: number;
      /** @description Bat side of hitter */
      batSide?: string;
      /** Format: int32 */
      batterId?: number;
      /** Format: int32 */
      battingTeamId?: number;
      /** @description End time code will give you a snapshot at that specific time. Format: MMDDYYYY_HHMMSS */
      endTimeUtc?: string;
      /** Format: int32 */
      fieldingTeamId?: number;
      /**
       * Format: date
       * @description Date of Game. Format: YYYY-MM-DD
       */
      gameDate?: string;
      /**
       * Format: int32
       * @description Statcast game mode. Format: 0 = Batting Practive, 1 = Warmup 2 = Live
       */
      gameMode?: number;
      /**
       * Format: int32
       * @description Unique Primary Key Representing a Game
       */
      gamePk?: number;
      /** Format: int32 */
      homeTeamId?: number;
      /**
       * Format: int32
       * @description The inning of a given game. Format: 1, 2, 3, etc
       */
      inning?: number;
      /** @description Whether or not it is the top of the inning */
      isTopInning?: boolean;
      pitchCall?: string;
      /** @description Handedness of pitcher */
      pitchHand?: string;
      /**
       * Format: int32
       * @description The pitch number of a given game. Format: 1, 2, 3, etc
       */
      pitchNumber?: number;
      /** @description Classification of pitch (fastball, curveball, etc...)<br/>For a list of all pitchTypes: https://statsapi.mlb.com/api/v1/pitchTypes */
      pitchType?: string;
      /** Format: int32 */
      pitcherId?: number;
      /** @description Unique identifier for a play within a game */
      playId?: string;
      /** Format: int32 */
      postBalls?: number;
      /** Format: int32 */
      postOuts?: number;
      postRunnerOn1b?: boolean;
      postRunnerOn2b?: boolean;
      postRunnerOn3b?: boolean;
      /** Format: int32 */
      postStrikes?: number;
      /** Format: int32 */
      preBalls?: number;
      /** Format: int32 */
      preOuts?: number;
      preRunnerOn1b?: boolean;
      preRunnerOn2b?: boolean;
      preRunnerOn3b?: boolean;
      /** Format: int32 */
      preStrikes?: number;
      result?: string;
      /** @description Start time code will give you everything since that time. Format: MMDDYYYY_HHMMSS */
      startTimeUtc?: string;
      /** Format: double */
      szBot?: number;
      /** Format: double */
      szTop?: number;
      /**
       * Format: int32
       * @description Unique Venue Identifier<br/>For a list of all venueIds: https://statsapi.mlb.com/api/v1/venues
       */
      venueId?: number;
    };
    OfficialRestObject: {
      official?: components["schemas"]["PersonRestObject"];
      officialType?: string;
    };
    OtherNamesRestObject: {
      firstInitialLastName?: string;
      lastFirstName?: string;
      lastNameFirstInitial?: string;
      phoneticName?: string;
      slug?: string;
    };
    Person: unknown;
    PersonRestObject: {
      /** @description Whether or not a player is active */
      active?: boolean;
      additionalBio?: components["schemas"]["AdditionalBioRestObject"];
      /** @description Whether or not a player is an alternate captain */
      alternateCaptain?: boolean;
      /** @description All of the details of a player's awards */
      awards?: components["schemas"]["AwardRestObject"][];
      /** @description City the player was born in. Format: La Romana */
      birthCity?: string;
      /** @description Country the player was born in. Format: Dominican Republic */
      birthCountry?: string;
      /**
       * Format: date
       * @description Birth date of a player. Format: 1983-01-07
       */
      birthDate?: string;
      /** @description State or Province the player was born in. Format: NY */
      birthStateProvince?: string;
      /** @description Name that shows up in the box score. Last name or last name and first initial */
      boxscoreName?: string;
      /** @description Whether or not a player is a captain */
      captain?: boolean;
      /**
       * Format: int32
       * @description Current age of a player. Format: 34
       */
      currentAge?: number;
      /** @description All of the details of a player's current team */
      currentTeam?: components["schemas"]["TeamRestObject"];
      /** @description City the player died in. Format: La Romana */
      deathCity?: string;
      /** @description Country the player died in. Format: Dominican Republic */
      deathCountry?: string;
      /**
       * Format: date
       * @description Death date of a player. Format: 1983-01-07
       */
      deathDate?: string;
      /** @description State or Province the player died in. Format: NY */
      deathStateProvince?: string;
      /** @description All of the details of the draft a player was drafted in */
      draft?: components["schemas"]["PlayerDraftInfoRestObject"][];
      /**
       * Format: int32
       * @description Year the player was drafted. Format: 2000
       */
      draftYear?: number;
      /** @description All of the details of a player's education */
      education?: components["schemas"]["EducationRestObject"];
      /** @description First name of a player */
      firstName?: string;
      /** @description Full name of a player. Format: Edwin Encarnacion */
      fullName?: string;
      /** @description Gender for a player. Format: M */
      gender?: string;
      /** @description Height of a player. Format: 6' 1 */
      height?: string;
      /**
       * Format: int32
       * @description Unique Player Identifier. Format: 434538, 429665, etc<br/>For a sample list of playerIds: https://statsapi.mlb.com/api/v1/sports/1/players?season=2019
       */
      id?: number;
      /** @description If current id searched for is a currently player */
      isPlayer?: boolean;
      /** @description Complete and confirmed all biographical data */
      isVerified?: boolean;
      jobEntries?: components["schemas"]["RosterEntryRestObject"][];
      /** @description Last name of a player */
      lastName?: string;
      /**
       * Format: date
       * @description Date of last game played. Format: 1983-01-07
       */
      lastPlayedDate?: string;
      /** @description Link to full resource */
      link?: string;
      /** @description Middle name of a player */
      middleName?: string;
      /** @description Matrilineal name for player. */
      nameMatrilineal?: string;
      nationality?: string;
      /** @description Nick nme for a player. Example: The Freak */
      nickName?: string;
      /** @description All of the details of a player's other names */
      otherNames?: components["schemas"]["OtherNamesRestObject"];
      /** @description Links to images of person. */
      photos?: components["schemas"]["PhotoRestObject"][];
      /** @description The jersey number a player wears */
      primaryNumber?: string;
      /** @description All of the details of a player's primary position */
      primaryPosition?: components["schemas"]["PositionRestObject"];
      /** @description Pronunciation guide for a player's name */
      pronunciation?: string;
      /** @description Whether or not a player is a rookie */
      rookie?: boolean;
      rosterEntries?: components["schemas"]["RosterEntryRestObject"][];
      /** @description All of the details of a player's social media */
      social?: components["schemas"]["SocialMediaRestObject"];
      /** @description All of the details of a player's stats */
      stats?: components["schemas"]["StatContainerRestObject"][];
      /** @description Name a player uses */
      useName?: string;
      /**
       * Format: int32
       * @description Weight of a player. Format: 230
       */
      weight?: number;
    };
    PhotoRestObject: {
      defaultRes?: string;
      doubleRes?: string;
      lowRes?: string;
      photoType?: string;
      tripleRes?: string;
    };
    Play: unknown;
    PlayByPlayRestObject: {
      /** @description Includes all details about all the plays of a game */
      plays?: components["schemas"]["PlayRestObject"][];
    };
    PlayRestObject: {
      /** @description Includes all details of a play */
      play?: components["schemas"]["Play"];
    };
    PlayerDraftInfoRestObject: {
      /** Format: int32 */
      pickInRound?: number;
      /** Format: int32 */
      pickOverall?: number;
      /** @description Round in which a player was drafted */
      round?: string;
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
      /**
       * Format: int32
       * @description Year the player was drafted. Format: 2000
       */
      year?: number;
    };
    PositionRestObject: {
      /** @description Position abbreviation. Format: SS, P, 1B, etc<br/>For a list of all positions: https://statsapi.mlb.com/api/v1/positions */
      abbreviation?: string;
      /** @description Position number. Format: 1, 2, 3, etc<br/>For a list of all positions: https://statsapi.mlb.com/api/v1/positions */
      code?: string;
      /** @description Position name. Format: First base, Shortstop, Pitcher, etc<br/>For a list of all positions: https://statsapi.mlb.com/api/v1/positions */
      name?: string;
      /** @description Position type. Format: Infielder, Pitcher, etc<br/>For a list of all positions: https://statsapi.mlb.com/api/v1/positions */
      type?: string;
    };
    PromotionRestObject: {
      /** @description Link to full resource */
      altPageUrl?: string;
      description?: string;
      displayIfPast?: boolean;
      distribution?: string;
      /** @description Link to full resource */
      imageUrl?: string;
      /** @description Unique Name */
      name?: string;
      /** Format: int32 */
      offerId?: number;
      offerType?: string;
      /** Format: int32 */
      order?: number;
      other?: string;
      presentedBy?: string;
      sortKey?: string;
      /**
       * Format: int32
       * @description Unique team identifier
       */
      teamId?: number;
      /** @description Link to full resource */
      thumbnailUrl?: string;
      /** @description Link to full resource */
      tlink?: string;
    };
    ResponseEntity: unknown;
    RosterEntryRestObject: {
      alternateCaptain?: boolean;
      captain?: boolean;
      /**
       * Format: date
       * @description End date for range of data (must be used with start date). Format: MM/DD/YYYY
       */
      endDate?: string;
      /** @description Whether or not a player is active */
      isActive?: boolean;
      isActiveFortyMan?: boolean;
      /** @description Jersey number that a player wears. Format: 16, 34, etc */
      jerseyNumber?: string;
      job?: string;
      jobId?: string;
      note?: string;
      /** Format: int32 */
      parentTeamId?: number;
      /** @description All of the details of a player */
      person?: components["schemas"]["PersonRestObject"];
      /** @description All of the details of a player's position */
      position?: components["schemas"]["PositionRestObject"];
      /**
       * Format: date
       * @description Start date for range of data (must be used with end date). Format: MM/DD/YYYY
       */
      startDate?: string;
      /** @description Type of statistics. Format: Individual, Team, Career, etc.<br/>For a list of all statTypes: https://statsapi.mlb.com/api/v1/statTypes */
      stats?: components["schemas"]["Stats"];
      status?: components["schemas"]["DynamicEnumRestObject"];
      /** Format: date */
      statusDate?: string;
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
      title?: string;
    };
    RosterRestObject: {
      /** @description Link to full resource */
      link?: string;
      /** @description All of the details of a roster */
      roster?: components["schemas"]["RosterEntryRestObject"][];
      /** @description Type of roster.<br/>For a list of all rosterTypes: https://statsapi.mlb.com/api/v1/rosterTypes */
      rosterType?: string;
      /**
       * Format: int32
       * @description Unique team identifier
       */
      teamId?: number;
    };
    ScheduleItemRestObject: {
      /** @description All of the promotional details */
      atBatPromotions?: components["schemas"]["PromotionRestObject"][];
      /** @description All of the ticket details */
      atBatTickets?: components["schemas"]["TicketRestObject"][];
      /** @description All of the broadcast details */
      broadcasts?: components["schemas"]["BroadcastRestObject"][];
      /** @description All of the details of game content */
      content?: components["schemas"]["GameContentRestObject"];
      /** @description All the details about the decisions of a game. Includes, Winner, Loser, and Save */
      decisions?: components["schemas"]["DecisionRestObject"];
      /**
       * Format: date-time
       * @description Format: YYYY-MM-DDTHH:MM:SSZ
       */
      endDateTime?: string;
      /**
       * Format: date-time
       * @description Date of Game. Format: YYYY-MM-DD
       */
      gameDate?: string;
      gameInfo?: components["schemas"]["GameInfoRestObject"];
      /** Format: int32 */
      gameNumber?: number;
      /**
       * Format: int32
       * @description Unique Primary Key Representing a Game
       */
      gamePk?: number;
      /** @description Type of Game. Available types in /api/v1/gameTypes */
      gameType?: string;
      isDefaultGame?: boolean;
      isFeaturedGame?: boolean;
      isTie?: boolean;
      /** @description Link to full resource */
      link?: string;
      /**
       * Format: date
       * @description Official Date of Game for Statistical Record. Format: YYYY-MM-DD
       */
      officialDate: string;
      officials?: components["schemas"]["OfficialRestObject"][];
      pregameOfficials?: components["schemas"]["OfficialRestObject"][];
      /** @description All of the promotional details */
      promotions?: components["schemas"]["PromotionRestObject"][];
      publicFacing?: boolean;
      /** @description All of the radio broadcast details */
      radioBroadcasts?: components["schemas"]["BroadcastRestObject"][];
      /** Format: date-time */
      rescheduleDate?: string;
      /** Format: date-time */
      rescheduledFrom?: string;
      /** Format: date-time */
      resumeDate?: string;
      /** Format: date-time */
      resumedFrom?: string;
      scoringPlays?: components["schemas"]["PlayRestObject"][];
      /** @description Season of play */
      season?: string;
      seriesStatus?: components["schemas"]["SeriesStatusRestObject"];
      seriesSummary?: components["schemas"]["TournamentSeriesSummaryRestObject"];
      /** Format: int32 */
      sortNumber?: number;
      /** @description All of the sponsorship details */
      sponsorships?: components["schemas"]["PromotionRestObject"][];
      /** @description Status and state of the game.<br/>For a list of all gameStatus: https://statsapi.mlb.com/api/v1/gameStatus */
      status?: components["schemas"]["GameStatusRestObject"];
      /** @description All of the ticket details */
      tickets?: components["schemas"]["TicketRestObject"][];
      /** @description All of the details of a venue<br/>For a list of all venueIds: https://statsapi.mlb.com/api/v1/venues */
      venue?: components["schemas"]["VenueRestObject"];
      weather?: components["schemas"]["WeatherRestObject"];
      xrefIds?: components["schemas"]["XrefIdRestObject"][];
    };
    ScheduleRestObject: unknown;
    SchoolRestObject: {
      /** @description City where the venue is located. Format: Cleveland */
      city?: string;
      /** @description Filter players by their home country */
      country?: string;
      /** @description Unique Name */
      name?: string;
      schoolClass?: string;
      /** @description State where the venue is located. Format: Ohio */
      state?: string;
    };
    SeasonRestObject: {
      /**
       * Format: date
       * @description Date of the all-star game. Format: YYYY-MM-DD
       */
      allStarDate?: string;
      /**
       * Format: date
       * @description Date of the first day of the second half of the regular season. Format: YYYY-MM-DD
       */
      firstDate2ndHalf?: string;
      /**
       * Format: date
       * @description Date of the last day of the first half of the regular season. Format: YYYY-MM-DD
       */
      lastDate1stHalf?: string;
      /**
       * Format: date
       * @description Date the postseason ends. Format: YYYY-MM-DD
       */
      postSeasonEndDate?: string;
      /**
       * Format: date
       * @description Date the postseason starts. Format: YYYY-MM-DD
       */
      postSeasonStartDate?: string;
      /**
       * Format: date
       * @description Date the preseason ends. Format: YYYY-MM-DD
       */
      preSeasonEndDate?: string;
      /**
       * Format: date
       * @description Date the preseason starts. Format: YYYY-MM-DD
       */
      preSeasonStartDate?: string;
      /**
       * Format: date
       * @description Date the regular season ends. Format: YYYY-MM-DD
       */
      regularSeasonEndDate?: string;
      /**
       * Format: date
       * @description Date the regular season starts. Format: YYYY-MM-DD
       */
      regularSeasonStartDate?: string;
      /** @description Season of play */
      seasonId?: string;
    };
    SeriesStatusRestObject: {
      description?: string;
      /** Format: int32 */
      gameNumber?: number;
      isOver?: boolean;
      isTied?: boolean;
      losingTeam?: components["schemas"]["TeamRestObject"];
      /**
       * Format: int32
       * @description The number of losses a team has. Format: 0, 12, 90, etc
       */
      losses?: number;
      result?: string;
      shortDescription?: string;
      /** @description Shortened version of name. Format: AL East, SF Giants */
      shortName?: string;
      /** Format: int32 */
      ties?: number;
      /** Format: int32 */
      totalGames?: number;
      winningTeam?: components["schemas"]["TeamRestObject"];
      /**
       * Format: int32
       * @description The number of wins a team has. Format: 0, 12, 90, etc
       */
      wins?: number;
    };
    SocialMediaRestObject: {
      /** @description The player's username and ID. Format: Username - georgekontos70, ID - 242731055756840 */
      facebook?: string[];
      googleplus?: string[];
      hashtags?: string[];
      /** @description The player's username. Format: joepanik, hunterpence, etc */
      instagram?: string[];
      periscope?: string[];
      pinterest?: string[];
      snapchat?: string[];
      tumblr?: string[];
      /** @description The player's handle. Format: @Bbelt9, @bcraw35, etc */
      twitter?: string[];
      vine?: string[];
      website?: string[];
      youtube?: string[];
    };
    Sport: unknown;
    SportRestObject: {
      /** @description Shortened version of short name. Format: ALE, SFG */
      abbreviation?: string;
      /** @description Flag for fetching sports that are currently active (Y), inactive (N), pending (P), or all teams (B) */
      active?: boolean;
      code?: string;
      deviceProperties?: components["schemas"]["JsonNode"];
      /**
       * Format: int32
       * @description Top level organization of a sport<br/>For a list of all sportIds: https://statsapi.mlb.com/api/v1/sports
       */
      id?: number;
      /** @description Link to full resource */
      link?: string;
      /** @description Name of a sport's league. Format: Major League Baseball */
      name?: string;
      /**
       * Format: int32
       * @description Determines the sort order of each sport. (ex. MLB -> AAA -> AA -> Rookie)
       */
      sortOrder?: number;
    };
    StatContainerRestObject: {
      exemptions?: components["schemas"]["StatExemptionRestObject"][];
      /** @description All of the details of a player */
      player?: components["schemas"]["Person"];
      /** @description Season of play */
      season?: string;
      /** @description All of the details of stat splits */
      splits?: components["schemas"]["StatSplitsRestObject"][];
      splitsTiedWithLimit?: components["schemas"]["StatSplitsRestObject"][];
      splitsTiedWithOffset?: components["schemas"]["StatSplitsRestObject"][];
      /** @description The sport the league belongs to<br/>For a list of all sportIds: https://statsapi.mlb.com/api/v1/sports */
      sport?: components["schemas"]["Sport"];
      stats?: components["schemas"]["StatDataRestObject"];
      /** @description All of the details of a team */
      team?: components["schemas"]["Team"];
      /** Format: int32 */
      totalSplits?: number;
    };
    StatDataRestObject: unknown;
    StatExemptionRestObject: {
      exemptionId?: string;
      exemptionName?: string;
      /** @description All of the details of a player */
      player?: components["schemas"]["PersonRestObject"];
    };
    StatSplitsRestObject: {
      awayTeam?: components["schemas"]["TeamRestObject"];
      /**
       * Format: date
       * @description Date of Game. Format: YYYY-MM-DD
       */
      date?: string;
      /** Format: int32 */
      dayOfWeek?: number;
      exemption?: components["schemas"]["StatExemptionRestObject"];
      /** @description Type of Game. Available types in /api/v1/gameTypes */
      gameType?: string;
      group?: string;
      homeTeam?: components["schemas"]["TeamRestObject"];
      isHome?: boolean;
      isWin?: boolean;
      /** @description The league the division belongs to<br/>For a list of all leagueIds: https://statsapi.mlb.com/api/v1/leagues */
      league?: components["schemas"]["LeagueRestObject"];
      /** Format: int32 */
      month?: number;
      /** Format: int32 */
      numOccurrences?: number;
      /**
       * Format: int32
       * @description The number of teams
       */
      numTeams?: number;
      /** @description All of the details of an opponent */
      opponent?: components["schemas"]["TeamRestObject"];
      opponentConference?: components["schemas"]["ConferenceRestObject"];
      opponentDivision?: components["schemas"]["DivisionRestObject"];
      /** @description All of the details of a player */
      player?: components["schemas"]["PersonRestObject"];
      /** Format: int32 */
      rank?: number;
      /** @description All of the details of a schedule */
      scheduleItemRestObject?: components["schemas"]["ScheduleItemRestObject"];
      /** @description Season of play */
      season?: string;
      split?: components["schemas"]["DynamicEnumRestObject"];
      /** @description The sport the league belongs to<br/>For a list of all sportIds: https://statsapi.mlb.com/api/v1/sports */
      sport?: components["schemas"]["SportRestObject"];
      /** @description Type of statistics. Format: Individual, Team, Career, etc.<br/>For a list of all statTypes: https://statsapi.mlb.com/api/v1/statTypes */
      stat?: components["schemas"]["StatDataRestObject"];
      /** @description Type of statistics. Format: Individual, Team, Career, etc.<br/>For a list of all statTypes: https://statsapi.mlb.com/api/v1/statTypes grouped */
      stats: components["schemas"]["GroupedStatDataRestObject"];
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
      type?: string;
      /** @description All of the details of a venue<br/>For a list of all venueIds: https://statsapi.mlb.com/api/v1/venues */
      venue?: components["schemas"]["VenueRestObject"];
    };
    Stats: unknown;
    StreakRestObject: {
      streakCode?: string;
      /** Format: int32 */
      streakNumber?: number;
      streakType?: string;
    };
    Team: unknown;
    TeamContentCms: unknown;
    TeamPlayoffs: unknown;
    TeamRestObject: {
      /** @description Shortened version of short name. Format: ALE, SFG */
      abbreviation?: string;
      /** @description All the details of a conference */
      conference?: components["schemas"]["ConferenceRestObject"];
      content?: components["schemas"]["TeamContentCms"];
      deviceProperties?: components["schemas"]["JsonNode"];
      /** @description All of the details of a division */
      division?: components["schemas"]["DivisionRestObject"];
      /** @description Unique File Code. Format: tor, nyy, etc */
      fileCode?: string;
      /** @description The first year of play. Format: 1903 */
      firstYearOfPlay?: string;
      /** @description All of the details of a franchise */
      franchise?: components["schemas"]["FranchiseRestObject"];
      homeAway?: string;
      /**
       * Format: int32
       * @description Unique team identifier
       */
      id?: number;
      isActive?: boolean;
      isPlaceholder?: boolean;
      /** @description The league the division belongs to<br/>For a list of all leagueIds: https://statsapi.mlb.com/api/v1/leagues */
      league?: components["schemas"]["LeagueRestObject"];
      /** @description Link to full resource */
      link?: string;
      /** @description Unique Team Location. Toronto, Bronx, etc */
      locationName?: string;
      /** @description Unique Full Team Name. Format: Toronto Blue Jays, New York Yankees, etc */
      name?: string;
      nextGameSchedule?: components["schemas"]["ScheduleRestObject"];
      nextSchedule?: components["schemas"]["ScheduleRestObject"];
      /** Format: int32 */
      parentOrgId?: number;
      parentOrgName?: string;
      playoffInfo?: components["schemas"]["TeamPlayoffs"];
      previousGameSchedule?: components["schemas"]["ScheduleRestObject"];
      previousSchedule?: components["schemas"]["ScheduleRestObject"];
      /** @description All of the details of a team's record */
      record?: components["schemas"]["TeamStandingsRecordRestObject"];
      /** @description All of the details of a roster */
      roster?: components["schemas"]["RosterRestObject"];
      /**
       * Format: int32
       * @description Season of play
       */
      season?: number;
      /** @description Shortened version of name. Format: AL East, SF Giants */
      shortName?: string;
      /** @description All of the details of a player's social media */
      social?: components["schemas"]["SocialMediaRestObject"];
      /** @description The sport the league belongs to<br/>For a list of all sportIds: https://statsapi.mlb.com/api/v1/sports */
      sport?: components["schemas"]["SportRestObject"];
      /** @description All of the details of a venue<br/>For a list of all venueIds: https://statsapi.mlb.com/api/v1/venues */
      springVenue?: components["schemas"]["VenueRestObject"];
      /** @description Unique Team Code. Format: tor, nya, etc */
      teamCode?: string;
      teamDesignation?: string;
      /** @description All of the details of team leaders */
      teamLeaders?: components["schemas"]["LeadersRestObject"][];
      /** @description Unique Team Name. Blue Jays, Yankees, etc */
      teamName?: string;
      /** @description All of the details of a player's stats */
      teamStats?: components["schemas"]["StatContainerRestObject"][];
      /** @description Three letter abbreviation that will be adjusted for different languages */
      triCode?: string;
      /** @description All of the details of a venue<br/>For a list of all venueIds: https://statsapi.mlb.com/api/v1/venues */
      venue?: components["schemas"]["VenueRestObject"];
    };
    TeamStandingsRecordRestObject: {
      clinchIndicator?: string;
      /** @description All the details of a conference */
      conference?: components["schemas"]["Conference"];
      conferenceGamesBack?: string;
      conferenceRank?: string;
      /** @description All of the details of a division */
      division?: components["schemas"]["Division"];
      divisionGamesBack?: string;
      divisionRank?: string;
      gamesBack?: string;
      /** Format: int32 */
      gamesPlayed?: number;
      /** @description The league the division belongs to<br/>For a list of all leagueIds: https://statsapi.mlb.com/api/v1/leagues */
      league?: components["schemas"]["League"];
      leagueGamesBack?: string;
      leagueRank?: string;
      leagueRecord?: components["schemas"]["WinLossRecordRestObject"];
      /** @description Season of play */
      season?: string;
      sportGamesBack?: string;
      sportRank?: string;
      springLeagueGamesBack?: string;
      springLeagueRank?: string;
      streak?: components["schemas"]["StreakRestObject"];
      /** @description All of the details of a team */
      team?: components["schemas"]["TeamRestObject"];
      wildCardGamesBack?: string;
      wildCardRank?: string;
    };
    TicketRestObject: {
      /** @description Link to full resource */
      ticketLink?: string;
      ticketType?: string;
    };
    TimeZoneRestObject: {
      /** @description Format: America/Detroit */
      id?: string;
      /**
       * Format: int32
       * @description The offset in hours from UTC. Format: -5
       */
      offset?: number;
      /** @description Time zone the venue is located in */
      tz?: string;
    };
    TournamentSeriesSummaryRestObject: unknown;
    TransactionRestObject: {
      /**
       * Format: date-time
       * @description Format: YYYY-MM-DDTHH:MM:SSZ
       */
      date?: string;
      description?: string;
      /** Format: date-time */
      effectiveDate?: string;
      fromTeam?: components["schemas"]["TeamRestObject"];
      /**
       * Format: int32
       * @description Unique Identifier
       */
      id?: number;
      isConditional?: boolean;
      /** @description All of the details of a player */
      person?: components["schemas"]["PersonRestObject"];
      /** Format: date-time */
      resolutionDate?: string;
      toTeam?: components["schemas"]["TeamRestObject"];
      type?: string;
    };
    VenueRestObject: {
      /** @description Dimensions and capacity of the venue */
      fieldInfo?: components["schemas"]["FieldInfoRestObject"];
      /**
       * Format: int32
       * @description Unique Identifier
       */
      id?: number;
      /** @description Link to full resource */
      link?: string;
      /** @description Location details about the venue */
      location?: components["schemas"]["LocationRestObject"];
      /** @description Unique Name */
      name?: string;
      /** @description Time zone the venue is located in */
      timeZone?: components["schemas"]["TimeZoneRestObject"];
    };
    VideoResolutionEnumRestObject: unknown;
    WeatherRestObject: {
      condition?: string;
      temp?: string;
      wind?: string;
    };
    WinLossRecordRestObject: {
      /** Format: int32 */
      losses?: number;
      pct?: string;
      /** Format: int32 */
      ties?: number;
      type?: string;
      /** Format: int32 */
      wins?: number;
    };
    XrefIdRestObject: unknown;
    Analytics_Meta_Data: unknown;
  };
}

export interface operations {
  /**
   * **Description:**
   * This endpoint returns the Gumbo Live Feed for a specific gamePk.
   *
   * **Return Includes:** Team information, live play by play data, and player information.
   *
   * **Required Parameters:** gamePk is required to run this call.
   *
   * **Hydrations:** This endpoint can accept the hydrations query parameter.
   *
   * <br></br>
   *
   * ---
   * **Example of call with required parameters:**
   *
   * https://statsapi.mlb.com/api/v1.1/game/534196/feed/live
   *
   * ---
   * **Example of call with all parameters:**
   *
   * https://statsapi.mlb.com/api/v1.1/game/534196/feed/live?timecode=20180323_014415&hydrate=alignment
   */
  liveGameV1: {
    parameters: {
      path: {
        /**
         * Insert gamePk to return the GUMBO live feed for a specific game.
         *
         * 1. Insert gamePk: https://statsapi.mlb.com/api/v1.1/game/534196/feed/live
         */
        gamePk: string;
      };
      query: {
        /**
         * Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS.
         *
         * **Return timecodes from timecodes endpoint https://statsapi.mlb.com/api/v1.1/game/534196/feed/live/timestamps.**
         *
         *
         * 1. Insert timecode: https://statsapi.mlb.com/api/v1.1/game/534196/feed/live?timecode=20180323_014415
         */
        timecode?: string;
        /**
         * Insert hydration(s) to return putout credits or defensive positioning data for all plays in a particular game. Format 'credits,alignment,flags'
         *
         * -Notes on "credits,alignment & flags" hydration
         *
         * Credits - This hydration will populate a credits array that will list the batter and pitcher of record where any event takes place. Main purpose of this hydration is to track mid ab pitching/batting substitutions.
         *
         * Alignment - This hydration will populate a defense object that lists each position for every play event in the liveData->plays->allPlays array and an offense object that contains batter and runner info if a base is occupied.
         *
         * Flags - This hydration will populate a flags array in the liveData->plays->allPlays  object when additional descriptive identifiers are needed.
         *
         * Officials - This hydration will populate an officials array with the alignment of officials for each play
         *
         * preState - This hydration will populate a preCount object for each playEvent (balls, strikes, outs)
         *
         * 1. One Hydration: https://statsapi.mlb.com/api/v1.1/game/530824/feed/live?hydrate=credits
         * 2. Multiple Hydrations: https://statsapi.mlb.com/api/v1.1/game/530824/feed/live?hydrate=credits,alignment,preState
         *
         *  - Available Hydrations:
         *      1. credits
         *      2. alignment
         *      3. flags
         *      4. officials
         *      5. preState
         */
        hydrate?: string[];
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1.1/game/534196/feed/live?fields=metaData,gameEvents,logicalEvents,gameData,game,pk,type,id
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["GameRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns the difference/discrepancies between two timecodes in the Gumbo Live Feed using the Diff Patch System.
   *
   * **Return Includes:** Play by play data and player information.
   * <br/><br/><b>Diff/Patch
   * System:</b> startTimecode and endTimecode can be used for getting
   * diffs.<br/>Expected usage:  <br/> 1) Request full payload by not passing
   * startTimecode or endTimecode.  This will return the most recent game
   * state.<br/> 2) Find the latest timecode in this response.  <br/> 3) Wait
   * X seconds<br/> 4) Use the timecode from step 2 above as the startTimecode.  This
   * will give you a diff of everything that has happened since
   * startTimecode.  <br/> 5) If no data is returned, wait X seconds and do
   * the same request.  <br/> 6) If data is returned, get a new timeStamp
   * from the response, and use that for the next call as startTimecode.
   * <br></br>
   * **Required Parameters:** all parameters are required to run this call. If incorrectly called the call will default to http://statsapi.mlb.com/api/v1.1/game/531304/feed/live
   * <br></br>
   *
   * ---
   * **Example of call with required parameters:**
   *
   * http://statsapi.mlb.com/api/v1.1/game/531321/feed/live/diffPatch?startTimecode=20180823_193704&endTimecode=20180823_193711
   */
  liveGameDiffPatchV1: {
    parameters: {
      path: {
        /**
         * Insert gamePk
         * 1. Insert gamePk: http://statsapi.mlb.com/api/v1.1/game/531321/feed/live/diffPatch
         */
        gamePk: number;
      };
      query: {
        /**
         * Insert startTimecode. Format:
         * MMDDYYYY_HHMMSS
         * 1. Insert startTimecode: http://statsapi.mlb.com/api/v1.1/game/531321/feed/live/diffPatch?startTimecode=20180823_193704&endTimecode=20180823_193711
         */
        startTimecode: string;
        /**
         * Insert endTimecode to complete this call
         * Format: MMDDYYYY_HHMMSS
         * 1. Insert endTimecode: http://statsapi.mlb.com/api/v1.1/game/531321/feed/live/diffPatch?startTimecode=20180823_193704&endTimecode=20180823_193711
         */
        endTimecode: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["ResponseEntity"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns timecodes for a specific gamePk.
   *
   * **Return Includes:** timecodes.
   *
   * **Required Parameters:** gamePk is required to run this call.
   *
   * ---
   * **Example of call with required parameters:**
   *
   * https://statsapi.mlb.com/api/v1.1/game/531060/feed/live/timestamps
   */
  liveTimestampv11: {
    parameters: {
      path: {
        /**
         * Insert gamePk to return timecodes for a specific game.
         * 1. Insert gamePk: https://statsapi.mlb.com/api/v1.1/game/531060/feed/live/timestamps
         */
        gamePk: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": string;
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns a directory of games with non Statcast data corrections. These changes include, scoring/pitching decisions,etc...
   *
   * **Return Includes:** biographical information.
   *
   * **Required Parameters:** updatedSince.
   *
   * ---
   * **Example of call with required parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/changes?sportId=1&updatedSince=2020-03-17T15:34:43
   */
  traditionalChanges: {
    parameters: {
      query: {
        /**
         * Insert updatedSince to return a directory of games with non Statcast data corrections changes made since the provided timestamp.
         *
         * 1. Insert timecode: https://statsapi.mlb.com/api/v1/game/changes?sportId=1&updatedSince=2020-03-17T15:34:43
         */
        updatedSince?: string;
        /**
         * Insert gamePk(s) to return a directory of games with non Statcast data corrections changes.
         *
         * 1. Insert gamePk: https://statsapi.mlb.com/api/v1/game/changes?gamePks=633879
         * 2. Insert gamePks: https://statsapi.mlb.com/api/v1/game/changes?gamePks=633879,633727
         */
        gamePks?: string;
        /**
         * Insert gameType(s) to return a directory of games with non Statcast data corrections for a specific sport.
         * 1. Insert one gameType:   https://statsapi.mlb.com/api/v1/game/changes?sportId=1&updatedSince=2020-03-17T15:34:43&gameTypes=S
         * 2. Insert multiple gameTypes:   https://statsapi.mlb.com/api/v1/game/changes?sportId=1&updatedSince=2020-03-17T15:34:43&gameTypes=S,R
         *
         *  For  a list of all gameTypes:  https://statsapi.mlb.com/api/v1/gameTypes
         */
        gameTypes?: number;
        /**
         * Insert a sportId to return a directory of games with non Statcast data corrections for a specific sport.
         * 1. Insert one sportIds:   https://statsapi.mlb.com/api/v1/game/changes?sportIds=1&updatedSince=2020-03-17T15:34:43
         * 2. Insert multiple sportIds:   https://statsapi.mlb.com/api/v1/game/changes?sportIds=1,16&updatedSince=2020-03-17T15:34:43
         *
         *  For  a list of all sportIds:  http://statsapi.mlb.com/api/v1/sports
         */
        sportId?: number;
        /**
         * Comma delimited list of specific fields to be returned. Format: topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/game/changes?sportId=1&updatedSince=2020-03-17T15:34:43&fields=dates,games,gamePk
         */
        fields?: string[];
        /**
         * Insert limit to limit the return of games.
         *
         * 1. Insert limit: https://statsapi.mlb.com/api/v1/game/changes?updatedSince=2020-03-17T15:34:43&limit=10
         */
        limit?: string;
        /**
         * Insert an offset to return i+1 as the first record.
         *
         * 1. Insert offset:  https://statsapi.mlb.com/api/v1/game/changes?updatedSince=2020-03-17T15:34:43&offset=5
         */
        offset?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PlayByPlayRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns timestamps reflecting the most recent data corrections made to games. This return is limited to 1000 objects.
   *
   * **Return Includes:** timestamps.
   *
   * **Required Parameters:** No parameters are required to run this call.
   *
   * ---
   * **Example of call with required parameters**
   *
   * http://statsapi.mlb.com/api/v1/analytics/game
   *
   * ---
   *
   * **Example of call with all parameters**
   *
   * http://statsapi.mlb.com/api/v1/analytics/game?lastMetricsUpdatedTime=2019-01-04T00:00:00.007380Z&gameModeId=2&limit=1
   */
  updateStatcastGames: {
    parameters: {
      query: {
        /**
         * Insert gameModeId to return timestamps for data corrections made for a specific gameMode. There are 3 different gameModes:
         * 1. 0= Batting Practice
         * 2. 1 = Warm Up
         * 3. 2 = Live Game
         *
         * Insert one gameMode per request. Request default to gameMode 2
         *
         * 1. Insert BP  gameMode : http://statsapi.mlb.com/api/v1/analytics/game?gameModeId=0
         * 2. Insert Warm Up gameMode: http://statsapi.mlb.com/api/v1/analytics/game?gameModeId=1
         * 3. Insert Live gameMode: http://statsapi.mlb.com/api/v1/analytics/game?gameModeId=2
         */
        gameModeId?: number;
        /**
         * Use this parameter to return a snapshot of the data at the specified
         * time.
         * 1. Insert timecode: http://statsapi.mlb.com/api/v1/analytics/game?lastUpdatedTime=2019-05-20T20:33:06.000058Z
         */
        timecode?: string;
        /**
         * Insert a limit to limit return {Limit 1000}.
         * 1. Insert limit: http://statsapi.mlb.com/api/v1/analytics/game?limit=10
         */
        limit?: string;
        /**
         * Sort return based on specific metric. Users can sort by 3 metrics:
         * 1. lastUpdatedTime - http://statsapi.mlb.com/api/v1/analytics/game?lastUpdatedTime=2021-06-19T11:00:00.000000Z&limit=10&offset=0&sortBy=lastUpdatedTime
         * 2. lastMetricsUpdatedTime - http://statsapi.mlb.com/api/v1/analytics/game?lastUpdatedTime=2021-06-19T11:00:00.000000Z&limit=10&offset=0&sortBy=lastMetricsUpdatedTime
         * 3. lastVideoUpdatedTime- http://statsapi.mlb.com/api/v1/analytics/game?lastVideoUpdatedTime=2021-06-19T11:00:00.000000Z&limit=10&offset=0&sortBy=lastVideoUpdatedTime
         *
         * Each of the 3 metrics map to the following objects
         *
         * 1. lastUpdatedTime ~ updatedAt
         * 2. lastMetricsUpdatedTime ~ metricsUpdatedAt
         * 3. lastVideoUpdatedTime ~ videoUpdatedAt
         *
         * Description of each of the 3 metrics.
         *
         * 1. lastUpdatedTime ~ Timestamp of most recent update made to an individual play from a given game. This includes reassingment of plays or updates to raw data.
         * 2. lastMetricsUpdatedTime ~ Timestamp of most recent update made only to the metrics of an individual play from a given game.
         * 3. lastVideoUpdatedTime ~ Timestamp of most recent update made to the video for an individual play from a given game.
         */
        "lastUpdatedTime/lastMetricsUpdatedTime/lastVideoUpdatedTime"?: string;
        /**
         * Insert isNonStatcast to return most recent MiLB games that have been updated with video.
         * 1. Insert isNonStatcast: http://statsapi.mlb.com/api/v1/analytics/game?lastUpdatedTime=2019-06-07&isNonStatcast=true
         */
        isNonStatcast?: boolean;
        /**
         * Insert an offset to returns i+1 as the first record in the set of most recent games {Limit 1000} updated since a specific time, specific gameMode.
         * 1. Insert offset: http://statsapi.mlb.com/api/v1/analytics/game?offset=10
         */
        offset?: string;
        /**
         * Insert season to return all updated Games for a given season.
         * 1. Insert offset: http://statsapi.mlb.com/api/v1/analytics/game?season=2021
         */
        season?: string;
        /**
         * Insert sportId to return all updated Games for a given sportId.
         * 1. Insert offset: http://statsapi.mlb.com/api/v1/analytics/game?sportId=11
         */
        sportId?: string;
        /**
         * Insert gameType to return all updated Games for a given gameType.
         * 1. Insert offset: http://statsapi.mlb.com/api/v1/analytics/game?gameType=D
         */
        gameType?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: http://statsapi.mlb.com/api/v1/analytics/game?fields=games,gamePk,metricsUpdatedAt
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["PlayByPlayRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns timestamps reflecting the most recent data corrections made to GUIDS. This return is limited to 1000 objects.
   *
   * **Return Includes:** timestamps.
   *
   * **Required Parameters:** No parameters are required to run this call.
   *
   * ---
   * **Example of call with required parameters**
   *
   * http://statsapi.mlb.com/api/v1/analytics/guids
   *
   * ---
   *
   * **Example of call with all parameters**
   *
   * http://statsapi.mlb.com/api/v1/analytics/guids?lastMetricsUpdatedTime=2019-01-04T00:00:00.007380Z&gameModeId=2&sortBy=lastMetricsUpdatedTime&limit=1
   */
  updateGameGuids: {
    parameters: {
      query: {
        /**
         * Insert gameModeId to return timestamps for data corrections made for a specific gameMode. There are 3 different gameModes:
         * 1. 0= Batting Practice
         * 2. 1 = Warm Up
         * 3. 2 = Live Game
         *
         * Insert one gameMode per request. Request default to gameMode 2
         *
         * 1. Insert BP  gameMode : http://statsapi.mlb.com/api/v1/analytics/guids?gameModeId=0
         * 2. Insert Warm Up gameMode: http://statsapi.mlb.com/api/v1/analytics/guids?gameModeId=1
         * 3. Insert Live gameMode: http://statsapi.mlb.com/api/v1/analytics/guids?gameModeId=2
         */
        gameModeId?: number;
        /**
         * Use this parameter to return a snapshot of the data at the specified
         * time.
         * 1. Insert timecode: http://statsapi.mlb.com/api/v1/analytics/guids?lastUpdatedTime=2018-10-25T09:58:06.007830Z
         */
        timecode?: string;
        /**
         * Insert a limit to limit return {Limit 1000}.
         * 1. Insert limit: http://statsapi.mlb.com/api/v1/analytics/guids?limit=10
         */
        limit?: string;
        /**
         * Sort return based on specific metric. Users can sort by 4 metrics:
         * 1. lastUpdatedTime - http://statsapi.mlb.com/api/v1/analytics/guids?lastUpdatedTime=2019-01-04T00:00:00.007380Z&gameModeId=2&sortBy=lastUpdatedTime
         * 2. lastMetricsUpdatedTime - http://statsapi.mlb.com/api/v1/analytics/guids?lastMetricsUpdatedTime=2019-01-04T00:00:00.007380Z&gameModeId=2&sortBy=lastMetricsUpdatedTime
         * 3. lastPlayTime-http://statsapi.mlb.com/api/v1/analytics/guids?lastPlayTime=2018-02-02T16:06:51.704011Z&gameModeId=2&sortBy=lastPlayTime
         * 4. lastVideoUpdatedTime  - http://statsapi.mlb.com/api/v1/analytics/guids?lastVideoUpdatedTime=2019-08-05T14:05:34.353000Z&sortBy=lastVideoUpdatedTime
         *
         *
         * Each of the 4 metrics map to the following objects
         *
         * 1. lastUpdatedTime ~ updatedAt
         * 2. lastMetricsUpdatedTime ~ metricsUpdatedAt
         * 3. lastPlayTime ~ time
         * 4. lastVideoUpdatedTime ~ videoUpdatedAt
         *
         *
         * Description of each of the 4 metrics.
         *
         * 1. lastUpdatedTime ~ Timestamp of most recent update made to an individual play. This includes reassingment of plays or updates to raw data.
         * 2. lastMetricsUpdatedTime ~ Timestamp of most recent update made only to the metrics of an individual play.
         * 3. lastPlayTime ~ Timestamp of when play has started, however this is not frame accurate like startTime,endTime, & pitchTime and can vary between plays
         * 4. lastVideoUpdatedTime ~ Timestamp of most recent update made to an individual play.
         */
        sortBy?: string;
        /**
         * Insert an offset to returns i+1 as the first record in the set of most recent games {Limit 1000} updated since a specific time, specific gameMode.
         * 1. Insert offset: http://statsapi.mlb.com/api/v1/analytics/guids?offset=10
         */
        offset?: string;
        /**
         * Insert season to return all updated GUIDs for a given season.
         * 1. Insert offset: http://statsapi.mlb.com/api/v1/analytics/guids?season=2021
         */
        season?: string;
        /**
         * Insert sportId to return all updated GUIDs for a given sportId.
         * 1. Insert offset: http://statsapi.mlb.com/api/v1/analytics/guids?sportId=11
         */
        sportId?: string;
        /**
         * Insert gameType to return all updated GUIDs for a given gameType.
         * 1. Insert offset: http://statsapi.mlb.com/api/v1/analytics/guids?gameType=D
         */
        gameType?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: http://statsapi.mlb.com/api/v1/analytics/guids?fields=games,gamePk,metricsUpdatedAt
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["PlayByPlayRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns Statcast data forall plays in a specific game.
   *
   * **Return Includes:** timestamps.
   *
   * **Required Parameters:** gamePk is required to run this call.
   *
   * ---
   * **Example of call with required parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/566685/guids?
   *
   * ---
   *
   * **Call with all parameters**
   *
   * http://statsapi.mlb.com/api/v1/game/566685/guids?lastUpdatedTime=2019-05-13T14:15:14.005620Z&gameModeId=2&isPitch=true&isHit=true&isPickoff=false&hydrate=analytics(result,hit,pitch,metrics,video,metaData)
   */
  Statcast: {
    parameters: {
      path: {
        /**
         * Insert gamePk to return GUIDS for a specific game.
         *  1. Insert gamePk: https://statsapi.mlb.com/api/v1/game/566685/guids?
         */
        gamePk: string;
      };
      query: {
        /**
         * Insert gameModeId to return timestamps for data corrections made for a specific gameMode. There are 3 different gameModes:
         * 1. 0= Batting Practice
         * 2. 1 = Warm Up
         * 3. 2 = Live Game
         *
         * Insert one gameMode per request. Request default to gameMode 2
         *
         * 1. Insert BP gameMode : https://statsapi.mlb.com/api/v1/game/566685/guids?gameModeId=0
         * 2. Insert Warm Up gameMode: https://statsapi.mlb.com/api/v1/game/566685/guids?gameModeId=1
         * 3. Insert Live gameMode: https://statsapi.mlb.com/api/v1/game/566685/guids?gameModeId=2
         */
        gameModeId?: number;
        /**
         * Use this parameter to return a snapshot of the data at the specified time it was updated.
         *
         * 1. Insert timecode: http://statsapi.mlb.com/api/v1/game/566685/guids?lastUpdatedTime=2019-05-13T14:15:14.005620Z&gameModeId=2&hydrate=analytics(video)
         */
        lastUpdatedTime?: string;
        /**
         * Use this parameter to return a snapshot of metrics data at the specified time it was updated.
         *
         * 1. Insert timecode: https://statsapi.mlb.com/api/v1/game/633627/guids?lastMetricsUpdatedTime=2021-06-28T04:28:39.839Z&gameModeId=2
         */
        lastMetricsUpdatedTime?: string;
        /**
         * Use this parameter to return a snapshot of video data at the specified time it was updated.
         *
         * 1. Insert timecode: https://statsapi.mlb.com/api/v1/game/649014/guids?lastVideoUpdatedTime=2021-06-30T09:18:08.292Z&gameModeId=2
         */
        lastVideoUpdatedTime?: string;
        /**
         * Insert isPitch to return either all GUIDS corresponding to pitches{true} or non-pitch events{false}.
         * 1. Insert isPitch true: https://statsapi.mlb.com/api/v1/game/566685/guids?gameModeId=2&isPitch=true
         * 2. Insert isPitch false: https://statsapi.mlb.com/api/v1/game/566685/guids?gameModeId=2&isPitch=false
         */
        isPitch?: string;
        /**
         * Insert isHit to return either all GUIDS corresponding to hits{true} or non-hit events{false}.
         * 1. Insert isHit true: https://statsapi.mlb.com/api/v1/game/566685/guids?gameModeId=2&isHit=true
         * 2. Insert isHit false: https://statsapi.mlb.com/api/v1/game/566685/guids?gameModeId=2&isHit=false
         */
        isHit?: string;
        /**
         * Insert isPickoff to return either all GUIDS corresponding to pickoffs{true} or non-pickoff events{false}.
         * 1. Insert isPickoff true: https://statsapi.mlb.com/api/v1/game/565798/guids?gameModeId=2&isPickoff=true
         * 2. Insert isPickoff false: https://statsapi.mlb.com/api/v1/game/565798/guids?gameModeId=2&isPickoff=false
         */
        isPickoff?: string;
        /**
         * Insert hydration(s) to return statistical or video data for a specific game. Format 'analytics(result,hit,pitch,metrics,video)'
         * 1. One Hydration: https://statsapi.mlb.com/api/v1/game/565798/guids?hydrate=analytics(hit)
         * 2. Multiple Hydrations: https://statsapi.mlb.com/api/v1/game/565798/guids?hydrate=analytics(result,hit,pitch,metrics,video,metaData)
         *
         *  - Available Hydrations:
         *     1. hit - Statcast hit segment (exit velocity, launch angle, etc.)
         *     2. pitch- Statcast ball segment (lastMeasuredData, releaseData trajectoryData
         *     3. metrics - Calculated Statcast metrics (Sprint Speed, Exit Velocity, etc.)
         *     5. video - URLs for clipped video files
         *     6. metaData- metaData for the play
         *     7. hydrations- all available hydrations
         */
        hydrate?: string;
        /**
         * Return full parsed or raw data via .tar for the entire game
         * 1. parsed: https://statsapi.mlb.com/api/v1/game/565798/analytics/parsed
         * 2. raw: https://statsapi.mlb.com/api/v1/game/565798/analytics/raw
         */
        "parsed/raw"?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/game/564248/guids?gameModeId=2&hydrate=analytics(hit)&fields=gamePk,hitSegment,launchData,speed
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["PlayByPlayRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns Statcast data for a specific play. Video is only available for MLB in this endpoint.
   *
   * **Return Includes:** timestamps.
   *
   * **Required Parameters:** gamePk and GUID are required to run this call.
   *
   * ---
   * **Example of call with required parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/567434/621dc1d1-aa75-4aed-b449-403bd4bcd3fa/analytics
   *
   * ---
   *
   * **Example of call with hydration parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/567434/621dc1d1-aa75-4aed-b449-403bd4bcd3fa/analytics?hydrate=hydrations,analytics(ball,metrics,video,positions,diagram,contextMetrics)
   */
  StatcastGuids: {
    parameters: {
      path: {
        /**
         * Insert gamePk to return Statcast data for a specific play.
         *  1. Insert gamePk: https://statsapi.mlb.com/api/v1/game/567434/621dc1d1-aa75-4aed-b449-403bd4bcd3fa/analytics?
         */
        gamePk: string;
        /**
         * Insert GUID to return Statcast data for a specific play.
         *  1. Insert GUID: https://statsapi.mlb.com/api/v1/game/567434/621dc1d1-aa75-4aed-b449-403bd4bcd3fa/analytics?
         */
        GUID: string;
      };
      query: {
        /**
         * Insert hydration(s) to return statistical or video data for a specific game. Format 'analytics(metrics, video, positions)'
         * 1. One Hydration: https://statsapi.mlb.com/api/v1/game/567434/621dc1d1-aa75-4aed-b449-403bd4bcd3fa/analytics?hydrate=hydrations,analytics(ball)
         * 2. Multiple Hydrations: https://statsapi.mlb.com/api/v1/game/567434/621dc1d1-aa75-4aed-b449-403bd4bcd3fa/analytics?hydrate=hydrations,analytics(ball,metrics,video,positions,diagram,contextMetrics)
         *
         *  - Available Hydrations:
         *     1. ball- Statcast generic measurements for hit and pitch segments (firstMeasurment, startData, etc...) Array of the measurement of the ball position and velocity
         *     2. metrics - Calculated Statcast metrics (Sprint Speed, Exit Velocity, etc.)
         *     3. video - URLs for clipped video files (MLB Only)
         *     4. positions - Identification of players tracked on the field
         *     5. diagram - visual  SVG image of what transpired on the play
         *     6. contextMetrics-  Calculated metrics put in context for the play
         *     7. calibration - Calibration data for the play
         *     8. hydrations- Show all available hydrations
         */
        hydrate?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/game/567434/621dc1d1-aa75-4aed-b449-403bd4bcd3fa/analytics?hydrate=hydrations,analytics(ball,metrics,video,positions,diagram,contextMetrics)&fields=trackedEvents,timeStamp,playEvent
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["PlayByPlayRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns links for skeletalData for specific play.
   *
   * **Return Includes:** skeletalData.
   *
   * **Required Parameters:** gamePk and GUID are required to run this call.
   *
   * ---
   * **Example of call with required parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/631105/b030086b-cc1e-4842-8941-def2c5c4d94f/analytics/skeletalData/files
   */
  skeletal: {
    parameters: {
      path: {
        /**
         * Insert gamePk to return links for skeletal data for a specific play.
         *  1. Insert gamePk: https://statsapi.mlb.com/api/v1/game/631105/b030086b-cc1e-4842-8941-def2c5c4d94f/analytics/skeletalData/files
         */
        gamePk: string;
        /**
         * Insert GUID to return links for skeletal data for a specific play.
         *  1. Insert GUID: https://statsapi.mlb.com/api/v1/game/631105/b030086b-cc1e-4842-8941-def2c5c4d94f/analytics/skeletalData/files
         */
        GUID: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["PlayByPlayRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns Context Metrics for a specific gamePk.
   *
   * **Return Includes:** Context Metircs, team information, venue information.
   *
   * **Required Parameters:** gamePk is required to run this call.
   *
   * ---
   * **Example of call with required parameters:**
   *
   * https://statsapi.mlb.com/api/v1/game/531060/contextMetrics
   *
   * ---
   * **Example of call with all parameters:**
   *
   * https://statsapi.mlb.com/api/v1/game/531060/contextMetrics?timecode=20180803_182458
   */
  getGameContextMetrics: {
    parameters: {
      path: {
        /**
         * Insert gamePk to return Conetext Metrics for a specific game.
         * 1. Insert gamePk: https://statsapi.mlb.com/api/v1/game/531060/contextMetrics
         */
        gamePk: number;
      };
      query: {
        /**
         * Insert timecode to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS.
         * 1. Insert timecode: https://statsapi.mlb.com/api/v1/game/531060/contextMetrics?timecode=20180803_182458
         */
        timecode?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/game/531060/contextMetrics?fields=game,gameDate,status,statusCode,teams,away,home,score,team,name,awayWinProbability,homeWinProbability
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["GameContextRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns complete game data with win probabilities after each at bat for a specific game.
   *
   * **Return Includes:** Win probability and play by play data.
   *
   * **Required Parameters:** gamePk is required to run this call.
   *
   * ---
   * **Example of call with required parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/531060/winProbability
   *
   * ---
   * **Example of call with all parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/531060/winProbability?timecode=20180803_182458
   */
  getWinProbability: {
    parameters: {
      path: {
        /**
         * Insert gamePk to return win probabilites after every at bat for a specific game.
         * 1. Insert gamePk: https://statsapi.mlb.com/api/v1/game/531060/winProbability
         */
        gamePk: number;
      };
      query: {
        /**
         * Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
         * 1. Insert timecode: https://statsapi.mlb.com/api/v1/game/531060/winProbability?timecode=20180803_182458
         */
        timecode?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/game/531060/winProbability?fields=atBatIndex,homeTeamWinProbability,awayTeamWinProbability
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "*/*": components["schemas"]["PlayRestObject"][];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns boxscore data for a specific gamePk.
   *
   * **Return Includes:** Boxscore,play by play, and team data.
   *
   * **Required Parameters:** gamePk is required to run this call.
   *
   * ---
   * **Example of call with required parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/531060/boxscore
   *
   * ---
   * **Example of call with all parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/531060/boxscore?timecode=20180803_182458
   */
  boxscore: {
    parameters: {
      path: {
        /**
         * Insert gamePk to return boxscore information for a specific game.
         * 1. Insert gamePk: https://statsapi.mlb.com/api/v1/game/531060/boxscore
         */
        gamePk: number;
      };
      query: {
        /**
         * Use this parameter to return a snapshot of the data at the specified time. Format: YYYYMMDD_HHMMSS
         * 1. Insert timecode: https://statsapi.mlb.com/api/v1/game/531060/boxscore?timecode=20180803_182458
         */
        timecode?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/game/531060/boxscore?fields=teams,away,team,id
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["Boxscore"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns editorial content for a specific gamePk.
   *
   * **Return Includes:** Editorial pieces, highlights, images, game summary and game notes.
   *
   * **Required Parameters:** gamePk is required to run this call.
   *
   * ---
   * **Example of call with required parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/531060/content
   *
   * ---
   * **Example of call with all parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/531060/content?highlightLimit=5
   */
  content: {
    parameters: {
      path: {
        /**
         * Insert gamePk to return content information for a specific game.
         * 1. Insert gamePk: https://statsapi.mlb.com/api/v1/game/531060/content
         */
        gamePk: number;
      };
      query: {
        /**
         * Number of results to return
         * 1. Insert limit: https://statsapi.mlb.com/api/v1/game/531060/content?highlightLimit=5
         */
        highlightLimit?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": unknown;
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns the color feed for a specific gamePk.
   *
   * **Return Includes:** Play by play, video, and pitch data.
   *
   * **Required Parameters:** gamePk is required to run this call.
   *
   * ---
   * **Example of call with required parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/531321/feed/color
   *
   * ---
   * **Example of call with all parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/531321/feed/color?timecode=20180803_182458
   */
  colorFeed: {
    parameters: {
      path: {
        /**
         * Insert gamePk to return the color feed for a specific game.
         * 1. Insert gamePk: https://statsapi.mlb.com/api/v1/game/531321/feed/color
         */
        gamePk: string;
      };
      query: {
        /**
         * Use this parameter to return a snapshot of the data at the specified.
         * time. Format: YYYYMMDD_HHMMSS
         * 1. Insert timecode: https://statsapi.mlb.com/api/v1/game/531321/feed/color?&timecode=20180823_181734
         */
        timecode?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/game/531321/feed/color?fields=game_id,items
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": string;
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns the difference/discrepancies between two timecodes in the Color Feed using the Diff Patch System.
   *
   * **Return Includes:** Play by play data and player information.
   * <br/><br/><b>Diff/Patch
   * System:</b> startTimecode and endTimecode can be used for getting
   * diffs.<br/>Expected usage:  <br/> 1) Request full payload by not passing
   * startTimecode or endTimecode.  This will return the most recent game
   * state.<br/> 2) Find the latest timecode in this response.  <br/> 3) Wait
   * X seconds<br/> 4) Use the timecode from step 2 above as the startTimecode.  This
   * will give you a diff of everything that has happened since
   * startTimecode.  <br/> 5) If no data is returned, wait X seconds and do
   * the same request.  <br/> 6) If data is returned, get a new timeStamp
   * from the response, and use that for the next call as startTimecode.
   * <br></br>
   * **Required Parameters:** all parameters are required to run this call. If incorrectly called the call will default to http://statsapi.mlb.com/api/v1/game/531304/feed/color
   * <br></br>
   *
   * ---
   * **Example of call with required parameters:**
   *
   * http://statsapi.mlb.com/api/v1.1/game/531321/feed/live/diffPatch?startTimecode=20180822_163853&endTimecode=20180822_163938
   */
  colorFeedDiffPatch: {
    parameters: {
      path: {
        /**
         * Insert gamePk
         * 1. Insert gamePk: http://statsapi.mlb.com/api/v1/game/531321/feed/color/diffPatch
         */
        gamePk: string;
      };
      query: {
        /**
         * Insert startTimecode. Format:
         * MMDDYYYY_HHMMSS
         *
         * 1. Insert starTimecode: http://statsapi.mlb.com/api/v1/game/531321/feed/color/diffPatch?startTimecode=20180823_162652
         */
        startTimecode: string;
        /**
         * Insert endTimecode to complete this call.
         * Format: MMDDYYYY_HHMMSS
         *
         * 1. Insert endTimecode: http://statsapi.mlb.com/api/v1.1/game/531321/feed/live/diffPatch?startTimecode=20180823_170716&endTimecode=20180823_171303
         */
        endTimecode: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["ResponseEntity"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns timecodes for a specific gamePk.
   *
   * **Return Includes:** timecodes.
   *
   * **Required Parameters:** gamePk is required to run this call.
   *
   * ---
   * **Example of call with required parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/534101/feed/color/timestamps
   */
  colortimecodes: {
    parameters: {
      path: {
        /**
         * Insert gamePk to return timecodes for a specific game.
         * 1. Insert gamePk: https://statsapi.mlb.com/api/v1/game/534101/feed/color/timestamps
         */
        gamePk: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": string;
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns linescore data from a specific gamePk.
   *
   * **Return Includes:** Linescore, play by play, and team data.
   *
   * **Required Parameters:** gamePk is required to run this call.
   *
   * ---
   * **Example of call with required parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/531060/linescore
   *
   * ---
   * **Example of call with all parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/531060/linescore?timecode=20180803_182458
   */
  linescore: {
    parameters: {
      path: {
        /**
         * Insert gamePk to return linescore information for a specific game.
         * 1. Insert gamePk: https://statsapi.mlb.com/api/v1/game/531060/linescore
         */
        gamePk: number;
      };
      query: {
        /**
         * Use this parameter to return a snapshot of the data at the specified
         * time. Format: YYYYMMDD_HHMMSS
         *
         * 1. Insert timecode: https://statsapi.mlb.com/api/v1/game/531060/linescore?timecode=20180803_182458
         */
        timecode?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/game/531060/linescore?fields=innings,num,home,away,runs
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["Linescore"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /**
   * **Description:**
   * This endpoint returns play by play data for a specific gamePk.
   *
   * **Return Includes:** play by play data.
   *
   * **Required Parameters:** gamePk is required to run this call.
   *
   * ---
   * **Example of call with required parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/531060/playByPlay
   *
   * ---
   *
   * **Example of call with all parameters**
   *
   * https://statsapi.mlb.com/api/v1/game/531060/playByPlay?timecode=20180803_182458
   */
  playByPlay: {
    parameters: {
      path: {
        /**
         * Insert gamePk to return timestamps for a specific game.
         * 1. Insert gamePk: https://statsapi.mlb.com/api/v1/game/531060/playByPlay
         */
        gamePk: number;
      };
      query: {
        /**
         * Use this parameter to return a snapshot of the data at the specified
         * time. Format: YYYYMMDD_HHMMSS
         * 1. Insert timecode: https://statsapi.mlb.com/api/v1/game/531060/playByPlay?timecode=20180803_182458
         */
        timecode?: string;
        /**
         * Comma delimited list of specific fields to be returned. Format:
         * topLevelNode, childNode, attribute
         *
         * Example: https://statsapi.mlb.com/api/v1/game/531060/playByPlay?fields=allPlays,result,type,description,about,inning
         */
        fields?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json;charset=UTF-8": components["schemas"]["PlayByPlayRestObject"];
        };
      };
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
}

export interface external {}
